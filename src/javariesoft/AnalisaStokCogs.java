/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AnalisaStokCogs.java
 *
 * Created on Mar 27, 2012, 8:09:46 AM
 */
package javariesoft;

import com.erv.db.barangDao;
import com.erv.db.koneksi;
import com.erv.function.JDBCAdapter;
import com.erv.model.barang;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 *
 * @author erwadi
 */
public class AnalisaStokCogs extends javax.swing.JFrame {

    Connection cm = null;
    Statement stat1 = null;

    /**
     * Creates new form AnalisaStokCogs
     */
    public AnalisaStokCogs() {
        initComponents();
        try {
            cm = koneksi.getKoneksiM();
            stat1 = cm.createStatement();
            buatTabel();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AnalisaStokCogs.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(AnalisaStokCogs.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelCool1 = new com.erv.function.PanelCool();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panelCool1.setName("panelCool1"); // NOI18N
        panelCool1.setLayout(null);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(javariesoft.JavarieSoftApp.class).getContext().getResourceMap(AnalisaStokCogs.class);
        jTable1.setFont(resourceMap.getFont("jTable1.font")); // NOI18N
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane1.setViewportView(jTable1);

        panelCool1.add(jScrollPane1);
        jScrollPane1.setBounds(20, 120, 620, 200);

        jButton1.setFont(resourceMap.getFont("jButton4.font")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        panelCool1.add(jButton1);
        jButton1.setBounds(160, 60, 130, 30);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTable2.setFont(resourceMap.getFont("jTable2.font")); // NOI18N
        jTable2.setName("jTable2"); // NOI18N
        jScrollPane2.setViewportView(jTable2);

        panelCool1.add(jScrollPane2);
        jScrollPane2.setBounds(20, 350, 620, 220);

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setForeground(resourceMap.getColor("jLabel1.foreground")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        panelCool1.add(jLabel1);
        jLabel1.setBounds(170, 20, 60, 15);

        jTextField1.setFont(resourceMap.getFont("jTextField1.font")); // NOI18N
        jTextField1.setText(resourceMap.getString("jTextField1.text")); // NOI18N
        jTextField1.setName("jTextField1"); // NOI18N
        panelCool1.add(jTextField1);
        jTextField1.setBounds(80, 20, 70, 21);

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setForeground(resourceMap.getColor("jLabel2.foreground")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        panelCool1.add(jLabel2);
        jLabel2.setBounds(20, 330, 120, 16);

        jTextField2.setFont(resourceMap.getFont("jTextField2.font")); // NOI18N
        jTextField2.setText(resourceMap.getString("jTextField2.text")); // NOI18N
        jTextField2.setName("jTextField2"); // NOI18N
        panelCool1.add(jTextField2);
        jTextField2.setBounds(240, 20, 80, 21);

        jButton2.setFont(resourceMap.getFont("jButton2.font")); // NOI18N
        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        panelCool1.add(jButton2);
        jButton2.setBounds(20, 60, 130, 30);

        jButton3.setFont(resourceMap.getFont("jButton4.font")); // NOI18N
        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        panelCool1.add(jButton3);
        jButton3.setBounds(300, 60, 130, 30);

        jButton4.setFont(resourceMap.getFont("jButton4.font")); // NOI18N
        jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
        jButton4.setName("jButton4"); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        panelCool1.add(jButton4);
        jButton4.setBounds(440, 60, 130, 30);

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setForeground(resourceMap.getColor("jLabel3.foreground")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        panelCool1.add(jLabel3);
        jLabel3.setBounds(20, 20, 50, 16);

        jLabel4.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
        jLabel4.setForeground(resourceMap.getColor("jLabel4.foreground")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        panelCool1.add(jLabel4);
        jLabel4.setBounds(20, 100, 120, 16);

        getContentPane().add(panelCool1, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(675, 611));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    Connection c = null;
    Statement stat = null;
    try {
        c = koneksi.getKoneksiJ();
        stat = c.createStatement();
        stat1.execute("delete from barang");
        // TODO add your handling code here:
        Statement s1 = c.createStatement();
        Statement s2 = c.createStatement();
        ResultSet r1, rs2 = null;
        int stokawal = 0;
        double cogsawal = 0;
        ResultSet rs = stat.executeQuery("select * from barang  order by 1");
        while (rs.next()) {
            stokawal = getStokSAwal(c,rs.getString(1), Integer.parseInt(jTextField1.getText()), Integer.parseInt(jTextField2.getText()));
            cogsawal = getCOGSAwal(c,rs.getString(1), Integer.parseInt(jTextField1.getText()), Integer.parseInt(jTextField2.getText()));
            r1 = s1.executeQuery("select * from stok where kodebarang='" + rs.getString(1) + "' order by 3");
            while (r1.next()) {
                if (r1.getString(6).equals("J")) {
                    stokawal = stokawal - r1.getInt(5);
                }
                if (r1.getString(6).equals("B")) {
                    rs2 = s2.executeQuery("SELECT\n"
                            + "     RINCIPEMBELIAN.\"IDPEMBELIAN\" AS RINCIPEMBELIAN_IDPEMBELIAN,\n"
                            + "     RINCIPEMBELIAN.\"KODEBARANG\" AS RINCIPEMBELIAN_KODEBARANG,\n"
                            + "     RINCIPEMBELIAN.\"JUMLAH\" AS RINCIPEMBELIAN_JUMLAH,\n"
                            + "     RINCIPEMBELIAN.\"HARGA\" AS RINCIPEMBELIAN_HARGA,\n"
                            + "     RINCIPEMBELIAN.\"TOTAL\" AS RINCIPEMBELIAN_TOTAL,\n"
                            + "     RINCIPEMBELIAN.\"PPN\" AS RINCIPEMBELIAN_PPN,\n"
                            + "     RINCIPEMBELIAN.\"DISKON\" AS RINCIPEMBELIAN_DISKON\n"
                            + "FROM\n"
                            + "     \"PUBLIC\".\"RINCIPEMBELIAN\" RINCIPEMBELIAN INNER JOIN \"PUBLIC\".\"PEMBELIAN\" PEMBELIAN ON RINCIPEMBELIAN.\"IDPEMBELIAN\" = PEMBELIAN.\"ID\"\n"
                            + "WHERE\n"
                            + "     RINCIPEMBELIAN.IDPEMBELIAN = '" + r1.getString(1) + "'\n"
                            + " AND RINCIPEMBELIAN.KODEBARANG = '" + r1.getString(2) + "'");
                    rs2.next();
                    double cogs = cogsawal * stokawal;
                    double ttot = rs2.getDouble(4) * rs2.getDouble(3);
                    double tdisk = (rs2.getDouble(7) / 100) * (ttot);
                    double tsemua = ttot - tdisk;
                    int totstok = stokawal + rs2.getInt(3);
                    cogsawal = (cogs + tsemua) / totstok;
                    stokawal = stokawal + r1.getInt(4);
                    if (r1.getString(6).equals("R")) {
                    }
                    rs2.close();
                }
            }
            r1.close();
            stat1.execute("insert into barang values('" + rs.getString(1) + "'," + stokawal + "," + cogsawal + ")");
        }
        rs.close();
        s1.close();
        s2.close();
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, "Masih Ada Salah " + ex.toString());
    } finally {
        if (stat != null) {
            try {
                stat.close();
            } catch (SQLException ex) {
                Logger.getLogger(AnalisaStokCogs.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (c != null) {
            try {
                c.close();
            } catch (SQLException ex) {
                Logger.getLogger(AnalisaStokCogs.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    reloadData();
}//GEN-LAST:event_jButton1ActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// TODO add your handling code here:
    Connection c = null;
    Statement stat = null;
    try {
        c = koneksi.getKoneksiJ();
        stat = c.createStatement();
        String pesan = "Proses Ok";
        boolean status = false;
        // TODO add your handling code here:
        Statement s1 = c.createStatement();
        Statement s2 = c.createStatement();
        ResultSet r1 = null;
        int stokawal, stok = 0;
        int bulan = Integer.parseInt(jTextField1.getText());
        int tahun = Integer.parseInt(jTextField2.getText());
        ResultSet rs = stat.executeQuery("select * from barang order by 1");
        while (rs.next()) {
            stokawal = getStokSAwal(c,rs.getString(1), bulan, tahun);
            stok = stokawal;
            r1 = s1.executeQuery("select * from stok where kodebarang='" + rs.getString(1) + "' order by 3");
            while (r1.next()) {
                if (r1.getString(6).equals("J")) {
                    stokawal = stokawal - r1.getInt(5);
                }
                if (r1.getString(6).equals("B")) {
                    stokawal = stokawal + r1.getInt(4);
                }
                if (stokawal < 0) {
                    status = true;
                    stok = stok + (Math.abs(stokawal));
                    pesan = "Masih Ada Minus";
                    break;
                }
            }
            if (status) {
                if (cekStokPeriode(c,bulan, tahun, rs.getString(1))) {
                    s2.execute("update stokperiode set JUMLAH=" + stok + " where periode='" + tahun + "." + bulan + "' AND KODEBARANG='" + rs.getString(1) + "'");
                } else {
                    s2.execute("insert into stokperiode values('" + jTextField2.getText() + "." + jTextField1.getText() + "','" + rs.getString(1) + "'," + (stok) + "," + rs.getDouble(8) + ")");
                }
            }
            r1.close();
        }
        rs.close();
        s1.close();
        s2.close();
        JOptionPane.showMessageDialog(null, pesan);
    } catch (SQLException ex) {
        Logger.getLogger(AnalisaStokCogs.class.getName()).log(Level.SEVERE, null, ex);
    } finally {
        if(stat!=null){
            try {
                stat.close();
            } catch (SQLException ex) {
                Logger.getLogger(AnalisaStokCogs.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(c!=null){
                try {
                    c.close();
                } catch (SQLException ex) {
                    Logger.getLogger(AnalisaStokCogs.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
}//GEN-LAST:event_jButton2ActionPerformed

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    Connection c=null;
    try {
        // TODO add your handling code here:
        c = koneksi.getKoneksiJ();
        stat1.execute("delete from temp");
        cek(c);
    } catch (SQLException ex) {
        Logger.getLogger(AnalisaStokCogs.class.getName()).log(Level.SEVERE, null, ex);
    } finally {
        if(c!=null){
            try {
                c.close();
            } catch (SQLException ex) {
                Logger.getLogger(AnalisaStokCogs.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
}//GEN-LAST:event_jButton3ActionPerformed

private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
// TODO add your handling code here:
    Connection c = null;
    barang b = new barang();
    try {
        c = koneksi.getKoneksiJ();
        Statement st = cm.createStatement();
        Statement st1 = cm.createStatement();
        ResultSet rs1 = st1.executeQuery("select * from temp");
        barangDao brd = new barangDao();
        while (rs1.next()) {
            ResultSet rs = st.executeQuery("select * from barang where kodebarang='" + rs1.getString(1) + "'");
            rs.next();
            b = brd.getDetails(c,rs1.getString(1));
            b.setSTOK(rs.getInt(2));
            b.setCOGS(rs.getDouble(3));
            brd.update(c,b);
        }
        JOptionPane.showMessageDialog(null, "Update Ok");
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Ada Salah " + ex.toString());
    } finally {
        if(c!=null){
            try {
                c.close();
            } catch (SQLException ex) {
                Logger.getLogger(AnalisaStokCogs.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

}//GEN-LAST:event_jButton4ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnalisaStokCogs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnalisaStokCogs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnalisaStokCogs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnalisaStokCogs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new AnalisaStokCogs().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private com.erv.function.PanelCool panelCool1;
    // End of variables declaration//GEN-END:variables

    void buatTabel() {
        String sql = "create table barang(KodeBarang varchar(20) Primary key,Stok int, COGS double)";
        String sql2 = "create table temp(KodeBarang varchar(20) Primary key,Stok int, COGS double)";
        try {
            stat1.execute(sql);
            stat1.execute(sql2);
        } catch (SQLException ex) {
            Logger.getLogger(AnalisaStokCogs.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    double getCOGSAwal(Connection c, String kodebarang, int bulan, int tahun) {
        double hasil = 0;
        try {
            Statement s = c.createStatement();
            ResultSet rs = s.executeQuery("SELECT\n"
                    + "     STOKPERIODE.\"COGS\" AS COGS\n"
                    + "FROM\n"
                    + "     \"PUBLIC\".\"STOKPERIODE\" STOKPERIODE\n"
                    + "WHERE\n"
                    + "     KODEBARANG = '" + kodebarang + "' AND PERIODE='" + tahun + "." + bulan + "'");
            if (rs.next()) {
                hasil = rs.getDouble(1);
            }
            rs.close();
            s.close();
        } catch (SQLException ex) {
            Logger.getLogger(AnalisaStokCogs.class.getName()).log(Level.SEVERE, null, ex);
        }
        return hasil;
    }

    int getStokSAwal(Connection c, String kodebarang, int bulan, int tahun) {
        int hasil = 0;
        try {
            Statement s = c.createStatement();
            ResultSet rs = s.executeQuery("SELECT\n"
                    + "     STOKPERIODE.\"JUMLAH\" AS STOK\n"
                    + "FROM\n"
                    + "     \"PUBLIC\".\"STOKPERIODE\" STOKPERIODE\n"
                    + "WHERE\n"
                    + "     KODEBARANG = '" + kodebarang + "' AND PERIODE='" + tahun + "." + bulan + "'");
            if (rs.next()) {
                hasil = rs.getInt(1);
            }
            rs.close();
            s.close();
        } catch (SQLException ex) {
            Logger.getLogger(AnalisaStokCogs.class.getName()).log(Level.SEVERE, null, ex);
        }
        return hasil;
    }

    void reloadData() {
        JDBCAdapter th = new JDBCAdapter(cm);
        String sql = "Select * from Barang order by 1";
        th.executeQuery(sql);
        jScrollPane1.getViewport().remove(jTable1);
        jTable1 = new JTable(th);

        jScrollPane1.getViewport().add(jTable1);
        jScrollPane1.repaint();
    }

    void reloadDataTemp() {
        JDBCAdapter th = new JDBCAdapter(cm);
        String sql = "Select * from TEMP order by 1";
        th.executeQuery(sql);
        jScrollPane2.getViewport().remove(jTable2);
        jTable2 = new JTable(th);
        jScrollPane2.getViewport().add(jTable2);
        jScrollPane2.repaint();
    }

    void cek(Connection c) {
        try {
            Statement stat = c.createStatement();
            Statement st = cm.createStatement();
            ResultSet rs1 = null;
            ResultSet rs = stat.executeQuery("select * from barang order by 1");
            while (rs.next()) {
                rs1 = st.executeQuery("select * from barang where kodebarang='" + rs.getString(1) + "'");
                if (rs1.next()) {
                    if ((rs.getInt(9) != rs1.getInt(2)) || (rs.getInt(8) != rs1.getInt(3))) {
                        stat1.execute("insert into temp values('" + rs.getString(1) + "'," + rs.getInt(9) + "," + rs.getDouble(8) + ")");
                    }
                }
            }
            rs.close();
            stat.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error :" + ex.getMessage());
        } 
        reloadDataTemp();
    }

    boolean cekStokPeriode(Connection c, int bulan, int tahun, String kodebarang) {
        boolean hasil = false;
        try {
            Statement s = c.createStatement();
            ResultSet rs = s.executeQuery("select * from stokperiode where periode='" + tahun + "." + bulan + "' AND KODEBARANG='" + kodebarang + "'");
            if (rs.next()) {
                if (rs.getString(1) != null) {
                    hasil = true;
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(AnalisaStokCogs.class.getName()).log(Level.SEVERE, null, ex);
        }

        return hasil;
    }
}
