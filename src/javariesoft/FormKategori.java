/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FormKategori.java
 *
 * Created on Jan 30, 2012, 2:33:21 PM
 */
package javariesoft;

import com.erv.db.kategoriDao;
import com.erv.db.koneksi;
import com.erv.function.JDBCAdapter;
import com.erv.model.kategori;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import com.eigher.db.loghistoryDao;
import com.eigher.model.loghistory;
import com.erv.db.JDBCLogHandler;

/**
 *
 * @author erwadi
 */
public class FormKategori extends javax.swing.JInternalFrame {

    Connection c = null;
    kategori b;
    loghistory lh;
    loghistoryDao lhdao;
    com.erv.function.Util u = new com.erv.function.Util();
    String aksilog = "";

    /**
     * Creates new form FormKategori
     */
    public FormKategori() {
        initComponents();
        try {
            c = koneksi.getKoneksiJ();
            c.createStatement().execute("set autocommit true");
            b = new kategori();
            lh = new loghistory();
            lhdao = new loghistoryDao();
            cektombol();
        } catch (SQLException ex) {
            Logger.getLogger(FormKategori.class.getName()).log(Level.SEVERE, null, ex);
        }
        reloadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelCool1 = new com.erv.function.PanelCool();
        jLabel1 = new javax.swing.JLabel();
        txtKategori = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtIDKategori = new javax.swing.JTextField();
        cmdInsert = new javax.swing.JButton();
        cmdUpdate = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnCancel = new javax.swing.JButton();
        btnFilter = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtKriteria = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        btnKeluar = new javax.swing.JButton();

        setClosable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(javariesoft.JavarieSoftApp.class).getContext().getResourceMap(FormKategori.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panelCool1.setName("panelCool1"); // NOI18N
        panelCool1.setLayout(null);

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setForeground(resourceMap.getColor("jLabel1.foreground")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        panelCool1.add(jLabel1);
        jLabel1.setBounds(30, 30, 130, 16);

        txtKategori.setFont(resourceMap.getFont("txtKategori.font")); // NOI18N
        txtKategori.setName("txtKategori"); // NOI18N
        txtKategori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKategoriActionPerformed(evt);
            }
        });
        txtKategori.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtKategoriFocusLost(evt);
            }
        });
        txtKategori.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtKategoriKeyPressed(evt);
            }
        });
        panelCool1.add(txtKategori);
        txtKategori.setBounds(150, 30, 310, 22);

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setForeground(resourceMap.getColor("jLabel2.foreground")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        panelCool1.add(jLabel2);
        jLabel2.setBounds(30, 60, 130, 16);

        txtIDKategori.setEditable(false);
        txtIDKategori.setFont(resourceMap.getFont("txtIDKategori.font")); // NOI18N
        txtIDKategori.setName("txtIDKategori"); // NOI18N
        panelCool1.add(txtIDKategori);
        txtIDKategori.setBounds(150, 60, 310, 22);

        cmdInsert.setFont(resourceMap.getFont("cmdInsert.font")); // NOI18N
        cmdInsert.setIcon(resourceMap.getIcon("cmdInsert.icon")); // NOI18N
        cmdInsert.setText(resourceMap.getString("cmdInsert.text")); // NOI18N
        cmdInsert.setName("cmdInsert"); // NOI18N
        cmdInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInsertActionPerformed(evt);
            }
        });
        panelCool1.add(cmdInsert);
        cmdInsert.setBounds(10, 100, 90, 25);

        cmdUpdate.setFont(resourceMap.getFont("cmdUpdate.font")); // NOI18N
        cmdUpdate.setIcon(resourceMap.getIcon("cmdUpdate.icon")); // NOI18N
        cmdUpdate.setText(resourceMap.getString("cmdUpdate.text")); // NOI18N
        cmdUpdate.setName("cmdUpdate"); // NOI18N
        cmdUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUpdateActionPerformed(evt);
            }
        });
        panelCool1.add(cmdUpdate);
        cmdUpdate.setBounds(105, 100, 100, 25);

        cmdDelete.setFont(resourceMap.getFont("cmdDelete.font")); // NOI18N
        cmdDelete.setIcon(resourceMap.getIcon("cmdDelete.icon")); // NOI18N
        cmdDelete.setText(resourceMap.getString("cmdDelete.text")); // NOI18N
        cmdDelete.setName("cmdDelete"); // NOI18N
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        panelCool1.add(cmdDelete);
        cmdDelete.setBounds(210, 100, 90, 25);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setName("jTable1"); // NOI18N
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        panelCool1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 170, 520, 250);

        btnCancel.setFont(resourceMap.getFont("btnCancel.font")); // NOI18N
        btnCancel.setIcon(resourceMap.getIcon("btnCancel.icon")); // NOI18N
        btnCancel.setText(resourceMap.getString("btnCancel.text")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        panelCool1.add(btnCancel);
        btnCancel.setBounds(320, 100, 90, 25);

        btnFilter.setFont(resourceMap.getFont("btnFilter.font")); // NOI18N
        btnFilter.setIcon(resourceMap.getIcon("btnFilter.icon")); // NOI18N
        btnFilter.setText(resourceMap.getString("btnFilter.text")); // NOI18N
        btnFilter.setName("btnFilter"); // NOI18N
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });
        panelCool1.add(btnFilter);
        btnFilter.setBounds(400, 140, 100, 25);

        jLabel7.setFont(resourceMap.getFont("jLabel7.font")); // NOI18N
        jLabel7.setForeground(resourceMap.getColor("jLabel7.foreground")); // NOI18N
        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N
        panelCool1.add(jLabel7);
        jLabel7.setBounds(30, 140, 150, 16);

        txtKriteria.setFont(resourceMap.getFont("txtKriteria.font")); // NOI18N
        txtKriteria.setName("txtKriteria"); // NOI18N
        txtKriteria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKriteriaActionPerformed(evt);
            }
        });
        panelCool1.add(txtKriteria);
        txtKriteria.setBounds(190, 140, 200, 22);

        jSeparator1.setName("jSeparator1"); // NOI18N
        panelCool1.add(jSeparator1);
        jSeparator1.setBounds(10, 90, 520, 10);

        jSeparator2.setName("jSeparator2"); // NOI18N
        panelCool1.add(jSeparator2);
        jSeparator2.setBounds(10, 130, 520, 10);

        btnKeluar.setFont(resourceMap.getFont("btnKeluar.font")); // NOI18N
        btnKeluar.setIcon(resourceMap.getIcon("btnKeluar.icon")); // NOI18N
        btnKeluar.setText(resourceMap.getString("btnKeluar.text")); // NOI18N
        btnKeluar.setName("btnKeluar"); // NOI18N
        btnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKeluarActionPerformed(evt);
            }
        });
        panelCool1.add(btnKeluar);
        btnKeluar.setBounds(420, 100, 100, 25);

        getContentPane().add(panelCool1, java.awt.BorderLayout.CENTER);

        setBounds(0, 0, 554, 456);
    }// </editor-fold>//GEN-END:initComponents

private void txtKategoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKategoriActionPerformed
    try {
        // TODO add your handling code here:
        txtKategori.setText(txtKategori.getText().toUpperCase());
        txtIDKategori.setText(kategoriDao.getID(c) + "");
        cmdInsert.requestFocus();
    } catch (SQLException ex) {
        Logger.getLogger(FormJenisBarang.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_txtKategoriActionPerformed

private void cmdInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInsertActionPerformed
// TODO add your handling code here:
    int x = JOptionPane.showConfirmDialog(this, "Apakah Data Akan Disimpan?", "", JOptionPane.YES_NO_OPTION);
    if (x == 0) {
        if ((txtKategori.getText().equals("")) || (txtIDKategori.getText().equals(""))) {
            JOptionPane.showMessageDialog(null, "Data Belum Lengkap.. !");
            txtKategori.requestFocus();
        } else {
            aksilog = "Insert";
            prosesUpdate(0);
            prosesUpdateLog();
            reloadData();
            cektombol();
            kosong();
            txtKategori.requestFocus();
            ////////
            Connection ch = null;
            try {
                ch = koneksi.getKoneksiJ();
            } catch (SQLException ex) {
                Logger.getLogger(FormKategori.class.getName()).log(Level.SEVERE, null, ex);
            }
            JDBCLogHandler jdbcHandler
                    = new JDBCLogHandler(ch);
            // setup
            Logger logger
                    = Logger.getLogger(FormKategori.class.getName());
            logger.addHandler(jdbcHandler);
            logger.setLevel(Level.ALL);

    // try some logging
            logger.info("Sample log entry");

            logger.warning("Sample warning");

            try {
                int i = 0 / 0;
            } catch (Exception e) {
                logger.log(Level.WARNING,
                        "This is what an exception looks like", e.getMessage());
            }
        }
    } else {
        txtKategori.requestFocus();
    }
}//GEN-LAST:event_cmdInsertActionPerformed

private void cmdUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUpdateActionPerformed
// TODO add your handling code here:
    int x = JOptionPane.showConfirmDialog(this, "Apakah Data Akan Diedit?", "", JOptionPane.YES_NO_OPTION);
    if (x == 0) {
        if ((txtKategori.getText().equals("")) || (txtIDKategori.getText().equals(""))) {
            JOptionPane.showMessageDialog(null, "Data Belum Lengkap.. !");
            txtKategori.requestFocus();
        } else {
            aksilog = "Update";
            prosesUpdate(1);
            prosesUpdateLog();
            reloadData();
            cektombol();
            kosong();
            txtKategori.requestFocus();
        }
    } else {
        txtKategori.requestFocus();
    }
}//GEN-LAST:event_cmdUpdateActionPerformed

private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
    try {
        // TODO add your handling code here:
        int x = JOptionPane.showConfirmDialog(this, "Apakah Data Akan Dihapus?", "", JOptionPane.YES_NO_OPTION);
        if (x == 0) {
            aksilog = "Delete";
            kategoriDao.deleteFromKATEGORI(c, txtIDKategori.getText());
            prosesUpdateLog();
            reloadData();
            cektombol();
            kosong();
            txtKategori.requestFocus();
        } else {
            txtKategori.requestFocus();
        }
    } catch (SQLException ex) {
        Logger.getLogger(FormJenisBarang.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_cmdDeleteActionPerformed

private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
    try {
        // TODO add your handling code here:
        b = kategoriDao.getDetails(c, jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
        txtIDKategori.setText(b.getIDKATEGORI());
        txtKategori.setText(b.getKATEGORI());
        cektombol();
    } catch (SQLException ex) {
        Logger.getLogger(FormJenisBarang.class.getName()).log(Level.SEVERE, null, ex);
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(FormJenisBarang.class.getName()).log(Level.SEVERE, null, ex);
    }

}//GEN-LAST:event_jTable1MouseClicked

private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
// TODO add your handling code here:
    kosong();
    cektombol();
    txtKategori.requestFocus();
}//GEN-LAST:event_btnCancelActionPerformed

private void txtKategoriFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtKategoriFocusLost
// TODO add your handling code here:
    cmdInsert.requestFocus();
}//GEN-LAST:event_txtKategoriFocusLost

private void txtKategoriKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtKategoriKeyPressed
// TODO add your handling code here:
    if (evt.getKeyCode() == 10) {
        cmdInsert.requestFocus();
    }
}//GEN-LAST:event_txtKategoriKeyPressed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        // TODO add your handling code here:
        reloadData();
    }//GEN-LAST:event_btnFilterActionPerformed

    private void txtKriteriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKriteriaActionPerformed
        // TODO add your handling code here:
        reloadData();
    }//GEN-LAST:event_txtKriteriaActionPerformed

    private void btnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKeluarActionPerformed
        dispose();
    }//GEN-LAST:event_btnKeluarActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        if (c != null) {
            try {
                c.close();
            } catch (SQLException ex) {
                Logger.getLogger(FormKategori.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_formInternalFrameClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnKeluar;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdInsert;
    private javax.swing.JButton cmdUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    private com.erv.function.PanelCool panelCool1;
    private javax.swing.JTextField txtIDKategori;
    private javax.swing.JTextField txtKategori;
    private javax.swing.JTextField txtKriteria;
    // End of variables declaration//GEN-END:variables

    private void reloadData() {
        try {
            JDBCAdapter j = new JDBCAdapter(c);
            String sql = "select * from KATEGORI where lower(IDKATEGORI) like '"
                    + txtKriteria.getText().toLowerCase() + "%' OR lower(KATEGORI) like '%"
                    + txtKriteria.getText().toLowerCase() + "%' ORDER BY KATEGORI";
            j.executeQuery(sql);
            jScrollPane1.getViewport().remove(jTable1);
            jTable1 = new JTable(j);
            jTable1.addMouseListener(new java.awt.event.MouseAdapter() {

                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jTable1MouseClicked(evt);
                }
            });
            jScrollPane1.getViewport().add(jTable1);
            jScrollPane1.repaint();
            j.close();
        } catch (Exception ex) {
            Logger.getLogger(FormBarang.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void prosesUpdate(int p) {
        b.setIDKATEGORI(txtIDKategori.getText());
        b.setKATEGORI(txtKategori.getText());
        try {
            boolean stat;
            if (p == 0) {
                stat = kategoriDao.insertIntoKATEGORI(c, b);
            } else {
                stat = kategoriDao.updateKATEGORI(c, b);
            }
            if (stat) {
                JOptionPane.showMessageDialog(this, "Update Data Ok");
            } else {
                JOptionPane.showMessageDialog(this, "Update Data Gagal");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.toString());
        }

    }

    void kosong() {
        txtIDKategori.setText("");
        txtKategori.setText("");
    }

    private void settingtombol(boolean simp, boolean edit, boolean hapus) {
        cmdInsert.setEnabled(simp);
        cmdUpdate.setEnabled(edit);
        cmdDelete.setEnabled(hapus);
    }

    void prosesUpdateLog() {
        //java.sql.Date tanggallog;
        String tanggallog;
        String jamlog = u.jamsekarang + ":" + u.menitsekarang + ":" + u.detiksekarang;
        //tanggallog = java.sql.Date.valueOf(u.thnsekarang + "-" + u.blnsekarang + "-" + u.tglsekarang);
        tanggallog = u.thnsekarang + "-" + u.blnsekarang + "-" + u.tglsekarang;
        try {
            String ketlog = "";
            lh.setUSERIDENTITY(JavarieSoftApp.jenisuser);
            lh.setTANGGAL(tanggallog);
            lh.setJAM(jamlog);
            lh.setTABEL("TKATEGORI");
            lh.setNOREFF(txtIDKategori.getText());
            lh.setAKSI(aksilog);
            if (aksilog.equals("Insert")) {
                ketlog = "Insert Data Kategori " + txtIDKategori.getText();
            } else if (aksilog.equals("Update")) {
                ketlog = "Update Data Kategori " + txtIDKategori.getText();
            } else if (aksilog.equals("Delete")) {
                ketlog = "Delete Data Kategori " + txtIDKategori.getText();
            }
            lh.setKETERANGAN(ketlog);
            lhdao.insert(c, lh);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.toString());
        }

    }

    void cektombol() {
        if (JavarieSoftApp.groupuser.equals("Pembelian")) {
            settingtombol(false, false, false);
        } else if (JavarieSoftApp.groupuser.equals("Penjualan")) {
            settingtombol(false, false, false);
        } else if (JavarieSoftApp.groupuser.equals("Administrator")) {
            settingtombol(true, true, false);
        } else if (JavarieSoftApp.groupuser.equals("KaGudang")) {
            settingtombol(false, false, false);
        } else if (JavarieSoftApp.groupuser.equals("Operator")) {
            settingtombol(false, false, false);
        } else if (JavarieSoftApp.groupuser.equals("Asisten Administrator")) {
            settingtombol(true, true, false);
        } else if (JavarieSoftApp.groupuser.equals("Master Data")) {
            settingtombol(true, false, false);
        }
    }
}
