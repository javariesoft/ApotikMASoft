/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FKoreksiStok.java
 *
 * Created on Jul 17, 2012, 11:06:28 AM
 */
package javariesoft;

import com.eigher.db.loghistoryDao;
import com.eigher.model.loghistory;
import com.erv.db.BarangstokDao;
import com.erv.db.KontrolTanggalDao;
import com.erv.db.barangDao;
import com.erv.db.jurnalDao;
import com.erv.db.koneksi;
import com.erv.db.rincijurnalDao;
import com.erv.db.stokDao;
import com.erv.function.JDBCAdapter;
import com.erv.function.Util;
import com.erv.fungsi.DecimalFormatRenderer;
import com.erv.model.Barangstok;
import com.erv.model.Satuan;
import com.erv.model.barang;
import com.erv.model.jurnal;
import com.erv.model.rincijurnal;
import com.erv.model.stok;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.TableColumn;

/**
 *
 * @author erwadi
 */
public final class FKoreksiStokNew extends javax.swing.JInternalFrame {

    Connection c;
    Connection cm;
    String kodeakun[];
    String namaAkun[];
    double Tdebet, Tkredit = 0.0;
    Statement stat = null;
    int IDJurnal = 0, IDjrn = 0;
    String aksilog = "";
    loghistory lh;
    loghistoryDao lhdao;
    barang b = null;
    barangDao brgdao = null;
    Barangstok bs = null;
    com.erv.function.Util u = new com.erv.function.Util();
    java.text.DateFormat d = new SimpleDateFormat("yyyy-MM-dd");
    String kodebatch = "";

    /**
     * Creates new form FKoreksiStok
     */
    public FKoreksiStokNew() {
        initComponents();
        try {
            c = koneksi.getKoneksiJ();
            cm = koneksi.getKoneksiM();
            stat = cm.createStatement();
            buatTabel();
            kosong();
            kosongjurnal();
            lh = new loghistory();
            lhdao = new loghistoryDao();
            b = new barang();
            brgdao = new barangDao();
            jScrollPane3.setVisible(false);
            jScrollPane3.setSize(650, 150);
            tglJurnal.setDateFormat(d);
            jRadioButton1.setSelected(true);
            pilihKoreksiStok();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FKoreksiStokNew.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(FKoreksiStokNew.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public String getKodebatch() {
        return kodebatch;
    }

    public void setKodebatch(String kodebatch) {
        this.kodebatch = kodebatch;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelCool1 = new com.erv.function.PanelCool();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtKodeBarang = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNamaBarang = new javax.swing.JTextField();
        txtJumlah = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        txtHarga = new javax.swing.JFormattedTextField();
        txtJumlahBaru = new javax.swing.JFormattedTextField();
        txtHargaBaru = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lblSatuan3 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        txtKodeJurnal = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        tglJurnal = new datechooser.beans.DateChooserCombo();
        jLabel9 = new javax.swing.JLabel();
        txtDeskripsi = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        cboGrup = new javax.swing.JComboBox();
        jSeparator3 = new javax.swing.JSeparator();
        cboAkun = new javax.swing.JComboBox();
        cboDK = new javax.swing.JComboBox();
        txtBiaya = new javax.swing.JFormattedTextField();
        btnInsert = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txtDebet = new javax.swing.JFormattedTextField();
        txtKredit = new javax.swing.JFormattedTextField();
        txtSelisih = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        txtKodeAkun = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        txtPersediaan = new javax.swing.JFormattedTextField();
        btnCancel = new javax.swing.JButton();
        btnKeluar = new javax.swing.JButton();
        CheckOtomatis = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        txtJumlahBaru1 = new javax.swing.JFormattedTextField();
        txtJumlahBaru2 = new javax.swing.JFormattedTextField();
        jLabel13 = new javax.swing.JLabel();
        lblSatuan1 = new javax.swing.JLabel();
        lblSatuan2 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtJumlahTotal = new javax.swing.JLabel();
        lblSatuan4 = new javax.swing.JLabel();
        lblSatuan5 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtHargaBaru1 = new javax.swing.JFormattedTextField();
        txtHargaBaru2 = new javax.swing.JFormattedTextField();
        jLabel16 = new javax.swing.JLabel();
        txtHargaBaru3 = new javax.swing.JFormattedTextField();

        setClosable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(javariesoft.JavarieSoftApp.class).getContext().getResourceMap(FKoreksiStokNew.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panelCool1.setName("panelCool1"); // NOI18N
        panelCool1.setLayout(null);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        jTable3.setName("jTable3"); // NOI18N
        jTable3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable3KeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        panelCool1.add(jScrollPane3);
        jScrollPane3.setBounds(150, 60, 20, 20);

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setForeground(resourceMap.getColor("jLabel1.foreground")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        panelCool1.add(jLabel1);
        jLabel1.setBounds(270, 70, 120, 15);

        txtKodeBarang.setFont(resourceMap.getFont("txtKodeBarang.font")); // NOI18N
        txtKodeBarang.setText(resourceMap.getString("txtKodeBarang.text")); // NOI18N
        txtKodeBarang.setName("txtKodeBarang"); // NOI18N
        txtKodeBarang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKodeBarangActionPerformed(evt);
            }
        });
        txtKodeBarang.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtKodeBarangKeyPressed(evt);
            }
        });
        panelCool1.add(txtKodeBarang);
        txtKodeBarang.setBounds(150, 40, 110, 21);

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setForeground(resourceMap.getColor("jLabel2.foreground")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        panelCool1.add(jLabel2);
        jLabel2.setBounds(30, 20, 130, 16);

        txtNamaBarang.setFont(resourceMap.getFont("txtNamaBarang.font")); // NOI18N
        txtNamaBarang.setText(resourceMap.getString("txtNamaBarang.text")); // NOI18N
        txtNamaBarang.setName("txtNamaBarang"); // NOI18N
        panelCool1.add(txtNamaBarang);
        txtNamaBarang.setBounds(270, 40, 390, 21);

        txtJumlah.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtJumlah.setFont(resourceMap.getFont("txtJumlah.font")); // NOI18N
        txtJumlah.setName("txtJumlah"); // NOI18N
        panelCool1.add(txtJumlah);
        txtJumlah.setBounds(150, 70, 80, 21);

        jLabel4.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
        jLabel4.setForeground(resourceMap.getColor("jLabel4.foreground")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        panelCool1.add(jLabel4);
        jLabel4.setBounds(30, 330, 130, 16);

        txtHarga.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtHarga.setEnabled(false);
        txtHarga.setFont(resourceMap.getFont("txtHarga.font")); // NOI18N
        txtHarga.setName("txtHarga"); // NOI18N
        panelCool1.add(txtHarga);
        txtHarga.setBounds(410, 70, 160, 21);

        txtJumlahBaru.setFont(resourceMap.getFont("txtJumlahBaru.font")); // NOI18N
        txtJumlahBaru.setName("txtJumlahBaru"); // NOI18N
        txtJumlahBaru.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtJumlahBaruFocusLost(evt);
            }
        });
        txtJumlahBaru.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtJumlahBaruKeyPressed(evt);
            }
        });
        panelCool1.add(txtJumlahBaru);
        txtJumlahBaru.setBounds(150, 110, 80, 21);

        txtHargaBaru.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtHargaBaru.setFont(resourceMap.getFont("txtHargaBaru.font")); // NOI18N
        txtHargaBaru.setName("txtHargaBaru"); // NOI18N
        txtHargaBaru.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtHargaBaruFocusLost(evt);
            }
        });
        txtHargaBaru.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtHargaBaruKeyPressed(evt);
            }
        });
        panelCool1.add(txtHargaBaru);
        txtHargaBaru.setBounds(410, 110, 160, 21);

        jLabel5.setFont(resourceMap.getFont("jLabel5.font")); // NOI18N
        jLabel5.setForeground(resourceMap.getColor("jLabel5.foreground")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        panelCool1.add(jLabel5);
        jLabel5.setBounds(30, 80, 130, 16);

        jSeparator1.setName("jSeparator1"); // NOI18N
        panelCool1.add(jSeparator1);
        jSeparator1.setBounds(30, 100, 810, 10);

        lblSatuan3.setFont(resourceMap.getFont("lblSatuan3.font")); // NOI18N
        lblSatuan3.setForeground(resourceMap.getColor("lblSatuan3.foreground")); // NOI18N
        lblSatuan3.setText(resourceMap.getString("lblSatuan3.text")); // NOI18N
        lblSatuan3.setName("lblSatuan3"); // NOI18N
        panelCool1.add(lblSatuan3);
        lblSatuan3.setBounds(590, 170, 230, 16);

        jSeparator2.setName("jSeparator2"); // NOI18N
        panelCool1.add(jSeparator2);
        jSeparator2.setBounds(30, 230, 800, 10);

        txtKodeJurnal.setEditable(false);
        txtKodeJurnal.setFont(resourceMap.getFont("txtKodeJurnal.font")); // NOI18N
        txtKodeJurnal.setText(resourceMap.getString("txtKodeJurnal.text")); // NOI18N
        txtKodeJurnal.setName("txtKodeJurnal"); // NOI18N
        panelCool1.add(txtKodeJurnal);
        txtKodeJurnal.setBounds(150, 240, 160, 21);

        jLabel8.setFont(resourceMap.getFont("jLabel8.font")); // NOI18N
        jLabel8.setForeground(resourceMap.getColor("jLabel8.foreground")); // NOI18N
        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N
        panelCool1.add(jLabel8);
        jLabel8.setBounds(360, 240, 80, 20);

        tglJurnal.setFieldFont(resourceMap.getFont("tglJurnal.dch_combo_fieldFont")); // NOI18N
        panelCool1.add(tglJurnal);
        tglJurnal.setBounds(150, 270, 160, 20);

        jLabel9.setFont(resourceMap.getFont("jLabel9.font")); // NOI18N
        jLabel9.setForeground(resourceMap.getColor("jLabel9.foreground")); // NOI18N
        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N
        panelCool1.add(jLabel9);
        jLabel9.setBounds(30, 270, 130, 16);

        txtDeskripsi.setFont(resourceMap.getFont("txtDeskripsi.font")); // NOI18N
        txtDeskripsi.setText(resourceMap.getString("txtDeskripsi.text")); // NOI18N
        txtDeskripsi.setName("txtDeskripsi"); // NOI18N
        panelCool1.add(txtDeskripsi);
        txtDeskripsi.setBounds(150, 300, 500, 21);

        jLabel10.setFont(resourceMap.getFont("jLabel10.font")); // NOI18N
        jLabel10.setForeground(resourceMap.getColor("jLabel10.foreground")); // NOI18N
        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N
        panelCool1.add(jLabel10);
        jLabel10.setBounds(30, 300, 130, 16);

        cboGrup.setFont(resourceMap.getFont("cboGrup.font")); // NOI18N
        cboGrup.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Harta", "Hutang", "Modal", "Pendapatan", "Harga Pokok Penjualan", "Biaya" }));
        cboGrup.setName("cboGrup"); // NOI18N
        cboGrup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboGrupActionPerformed(evt);
            }
        });
        panelCool1.add(cboGrup);
        cboGrup.setBounds(150, 330, 160, 22);

        jSeparator3.setName("jSeparator3"); // NOI18N
        panelCool1.add(jSeparator3);
        jSeparator3.setBounds(30, 360, 800, 10);

        cboAkun.setFont(resourceMap.getFont("cboAkun.font")); // NOI18N
        cboAkun.setName("cboAkun"); // NOI18N
        panelCool1.add(cboAkun);
        cboAkun.setBounds(30, 370, 290, 22);

        cboDK.setFont(resourceMap.getFont("cboDK.font")); // NOI18N
        cboDK.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Debet", "Kredit" }));
        cboDK.setName("cboDK"); // NOI18N
        panelCool1.add(cboDK);
        cboDK.setBounds(330, 370, 100, 22);

        txtBiaya.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtBiaya.setFont(resourceMap.getFont("txtBiaya.font")); // NOI18N
        txtBiaya.setName("txtBiaya"); // NOI18N
        txtBiaya.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBiayaActionPerformed(evt);
            }
        });
        panelCool1.add(txtBiaya);
        txtBiaya.setBounds(440, 370, 170, 22);

        btnInsert.setFont(resourceMap.getFont("btnInsert.font")); // NOI18N
        btnInsert.setIcon(resourceMap.getIcon("btnInsert.icon")); // NOI18N
        btnInsert.setText(resourceMap.getString("btnInsert.text")); // NOI18N
        btnInsert.setName("btnInsert"); // NOI18N
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });
        panelCool1.add(btnInsert);
        btnInsert.setBounds(30, 400, 100, 25);

        jButton1.setFont(resourceMap.getFont("jButton1.font")); // NOI18N
        jButton1.setIcon(resourceMap.getIcon("jButton1.icon")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        panelCool1.add(jButton1);
        jButton1.setBounds(130, 400, 100, 25);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setName("jTable1"); // NOI18N
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        panelCool1.add(jScrollPane1);
        jScrollPane1.setBounds(30, 430, 810, 120);

        txtDebet.setFont(resourceMap.getFont("txtDebet.font")); // NOI18N
        txtDebet.setName("txtDebet"); // NOI18N
        txtDebet.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtDebetCaretUpdate(evt);
            }
        });
        panelCool1.add(txtDebet);
        txtDebet.setBounds(510, 560, 160, 30);

        txtKredit.setFont(resourceMap.getFont("txtKredit.font")); // NOI18N
        txtKredit.setName("txtKredit"); // NOI18N
        txtKredit.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtKreditCaretUpdate(evt);
            }
        });
        panelCool1.add(txtKredit);
        txtKredit.setBounds(680, 560, 160, 30);

        txtSelisih.setFont(resourceMap.getFont("txtSelisih.font")); // NOI18N
        txtSelisih.setName("txtSelisih"); // NOI18N
        panelCool1.add(txtSelisih);
        txtSelisih.setBounds(680, 600, 160, 30);

        jLabel11.setFont(resourceMap.getFont("jLabel11.font")); // NOI18N
        jLabel11.setForeground(resourceMap.getColor("jLabel11.foreground")); // NOI18N
        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N
        panelCool1.add(jLabel11);
        jLabel11.setBounds(600, 610, 70, 14);

        txtKodeAkun.setFont(resourceMap.getFont("txtKodeAkun.font")); // NOI18N
        txtKodeAkun.setText(resourceMap.getString("txtKodeAkun.text")); // NOI18N
        txtKodeAkun.setName("txtKodeAkun"); // NOI18N
        txtKodeAkun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKodeAkunActionPerformed(evt);
            }
        });
        panelCool1.add(txtKodeAkun);
        txtKodeAkun.setBounds(320, 330, 180, 21);

        jButton2.setFont(resourceMap.getFont("jButton2.font")); // NOI18N
        jButton2.setIcon(resourceMap.getIcon("jButton2.icon")); // NOI18N
        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        panelCool1.add(jButton2);
        jButton2.setBounds(30, 560, 150, 40);

        jLabel12.setFont(resourceMap.getFont("jLabel12.font")); // NOI18N
        jLabel12.setForeground(resourceMap.getColor("jLabel12.foreground")); // NOI18N
        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N
        panelCool1.add(jLabel12);
        jLabel12.setBounds(30, 240, 130, 16);

        txtPersediaan.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        txtPersediaan.setFont(resourceMap.getFont("txtPersediaan.font")); // NOI18N
        txtPersediaan.setName("txtPersediaan"); // NOI18N
        panelCool1.add(txtPersediaan);
        txtPersediaan.setBounds(500, 240, 160, 21);

        btnCancel.setFont(resourceMap.getFont("btnCancel.font")); // NOI18N
        btnCancel.setIcon(resourceMap.getIcon("btnCancel.icon")); // NOI18N
        btnCancel.setText(resourceMap.getString("btnCancel.text")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        panelCool1.add(btnCancel);
        btnCancel.setBounds(250, 400, 110, 25);

        btnKeluar.setFont(resourceMap.getFont("btnKeluar.font")); // NOI18N
        btnKeluar.setIcon(resourceMap.getIcon("btnKeluar.icon")); // NOI18N
        btnKeluar.setText(resourceMap.getString("btnKeluar.text")); // NOI18N
        btnKeluar.setName("btnKeluar"); // NOI18N
        btnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKeluarActionPerformed(evt);
            }
        });
        panelCool1.add(btnKeluar);
        btnKeluar.setBounds(370, 400, 110, 25);

        CheckOtomatis.setFont(resourceMap.getFont("CheckOtomatis.font")); // NOI18N
        CheckOtomatis.setText(resourceMap.getString("CheckOtomatis.text")); // NOI18N
        CheckOtomatis.setName("CheckOtomatis"); // NOI18N
        panelCool1.add(CheckOtomatis);
        CheckOtomatis.setBounds(500, 400, 140, 25);

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setForeground(resourceMap.getColor("jLabel3.foreground")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        panelCool1.add(jLabel3);
        jLabel3.setBounds(30, 40, 130, 16);

        jRadioButton1.setText(resourceMap.getString("jRadioButton1.text")); // NOI18N
        jRadioButton1.setName("jRadioButton1"); // NOI18N
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        panelCool1.add(jRadioButton1);
        jRadioButton1.setBounds(150, 10, 160, 23);

        jRadioButton2.setText(resourceMap.getString("jRadioButton2.text")); // NOI18N
        jRadioButton2.setName("jRadioButton2"); // NOI18N
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });
        panelCool1.add(jRadioButton2);
        jRadioButton2.setBounds(330, 10, 170, 23);

        txtJumlahBaru1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        txtJumlahBaru1.setFont(resourceMap.getFont("txtJumlahBaru1.font")); // NOI18N
        txtJumlahBaru1.setName("txtJumlahBaru1"); // NOI18N
        txtJumlahBaru1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtJumlahBaru1FocusLost(evt);
            }
        });
        txtJumlahBaru1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtJumlahBaru1KeyPressed(evt);
            }
        });
        panelCool1.add(txtJumlahBaru1);
        txtJumlahBaru1.setBounds(150, 140, 80, 22);

        txtJumlahBaru2.setFont(resourceMap.getFont("txtJumlahBaru2.font")); // NOI18N
        txtJumlahBaru2.setName("txtJumlahBaru2"); // NOI18N
        txtJumlahBaru2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtJumlahBaru2FocusLost(evt);
            }
        });
        txtJumlahBaru2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtJumlahBaru2KeyPressed(evt);
            }
        });
        panelCool1.add(txtJumlahBaru2);
        txtJumlahBaru2.setBounds(150, 170, 80, 22);

        jLabel13.setFont(resourceMap.getFont("jLabel13.font")); // NOI18N
        jLabel13.setForeground(resourceMap.getColor("jLabel13.foreground")); // NOI18N
        jLabel13.setText(resourceMap.getString("jLabel13.text")); // NOI18N
        jLabel13.setName("jLabel13"); // NOI18N
        panelCool1.add(jLabel13);
        jLabel13.setBounds(30, 200, 110, 16);

        lblSatuan1.setFont(resourceMap.getFont("lblSatuan1.font")); // NOI18N
        lblSatuan1.setForeground(resourceMap.getColor("lblSatuan1.foreground")); // NOI18N
        lblSatuan1.setText(resourceMap.getString("lblSatuan1.text")); // NOI18N
        lblSatuan1.setName("lblSatuan1"); // NOI18N
        panelCool1.add(lblSatuan1);
        lblSatuan1.setBounds(590, 110, 250, 16);

        lblSatuan2.setFont(resourceMap.getFont("lblSatuan2.font")); // NOI18N
        lblSatuan2.setForeground(resourceMap.getColor("lblSatuan2.foreground")); // NOI18N
        lblSatuan2.setText(resourceMap.getString("lblSatuan2.text")); // NOI18N
        lblSatuan2.setName("lblSatuan2"); // NOI18N
        panelCool1.add(lblSatuan2);
        lblSatuan2.setBounds(590, 140, 250, 16);

        jLabel14.setFont(resourceMap.getFont("jLabel14.font")); // NOI18N
        jLabel14.setForeground(resourceMap.getColor("jLabel14.foreground")); // NOI18N
        jLabel14.setText(resourceMap.getString("jLabel14.text")); // NOI18N
        jLabel14.setName("jLabel14"); // NOI18N
        panelCool1.add(jLabel14);
        jLabel14.setBounds(270, 200, 120, 16);

        txtJumlahTotal.setFont(resourceMap.getFont("txtJumlahTotal.font")); // NOI18N
        txtJumlahTotal.setForeground(resourceMap.getColor("txtJumlahTotal.foreground")); // NOI18N
        txtJumlahTotal.setText(resourceMap.getString("txtJumlahTotal.text")); // NOI18N
        txtJumlahTotal.setName("txtJumlahTotal"); // NOI18N
        panelCool1.add(txtJumlahTotal);
        txtJumlahTotal.setBounds(150, 200, 80, 15);

        lblSatuan4.setFont(resourceMap.getFont("lblSatuan4.font")); // NOI18N
        lblSatuan4.setForeground(resourceMap.getColor("lblSatuan4.foreground")); // NOI18N
        lblSatuan4.setText(resourceMap.getString("lblSatuan4.text")); // NOI18N
        lblSatuan4.setName("lblSatuan4"); // NOI18N
        panelCool1.add(lblSatuan4);
        lblSatuan4.setBounds(590, 200, 250, 16);

        lblSatuan5.setFont(resourceMap.getFont("lblSatuan5.font")); // NOI18N
        lblSatuan5.setForeground(resourceMap.getColor("lblSatuan5.foreground")); // NOI18N
        lblSatuan5.setText(resourceMap.getString("lblSatuan5.text")); // NOI18N
        lblSatuan5.setName("lblSatuan5"); // NOI18N
        panelCool1.add(lblSatuan5);
        lblSatuan5.setBounds(590, 70, 260, 16);

        jLabel15.setFont(resourceMap.getFont("jLabel15.font")); // NOI18N
        jLabel15.setForeground(resourceMap.getColor("jLabel15.foreground")); // NOI18N
        jLabel15.setText(resourceMap.getString("jLabel15.text")); // NOI18N
        jLabel15.setName("jLabel15"); // NOI18N
        panelCool1.add(jLabel15);
        jLabel15.setBounds(30, 120, 100, 16);

        txtHargaBaru1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtHargaBaru1.setFont(resourceMap.getFont("txtHargaBaru1.font")); // NOI18N
        txtHargaBaru1.setName("txtHargaBaru1"); // NOI18N
        txtHargaBaru1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtHargaBaru1FocusLost(evt);
            }
        });
        txtHargaBaru1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtHargaBaru1KeyPressed(evt);
            }
        });
        panelCool1.add(txtHargaBaru1);
        txtHargaBaru1.setBounds(410, 140, 160, 22);

        txtHargaBaru2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtHargaBaru2.setFont(resourceMap.getFont("txtHargaBaru2.font")); // NOI18N
        txtHargaBaru2.setName("txtHargaBaru2"); // NOI18N
        txtHargaBaru2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHargaBaru2ActionPerformed(evt);
            }
        });
        txtHargaBaru2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtHargaBaru2FocusLost(evt);
            }
        });
        txtHargaBaru2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtHargaBaru2KeyPressed(evt);
            }
        });
        panelCool1.add(txtHargaBaru2);
        txtHargaBaru2.setBounds(410, 170, 160, 22);

        jLabel16.setFont(resourceMap.getFont("jLabel16.font")); // NOI18N
        jLabel16.setForeground(resourceMap.getColor("jLabel16.foreground")); // NOI18N
        jLabel16.setText(resourceMap.getString("jLabel16.text")); // NOI18N
        jLabel16.setName("jLabel16"); // NOI18N
        panelCool1.add(jLabel16);
        jLabel16.setBounds(270, 110, 120, 16);

        txtHargaBaru3.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtHargaBaru3.setFont(resourceMap.getFont("txtHargaBaru3.font")); // NOI18N
        txtHargaBaru3.setName("txtHargaBaru3"); // NOI18N
        txtHargaBaru3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHargaBaru3ActionPerformed(evt);
            }
        });
        txtHargaBaru3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtHargaBaru3FocusLost(evt);
            }
        });
        panelCool1.add(txtHargaBaru3);
        txtHargaBaru3.setBounds(410, 200, 160, 22);

        getContentPane().add(panelCool1, java.awt.BorderLayout.CENTER);

        setBounds(0, 0, 887, 675);
    }// </editor-fold>//GEN-END:initComponents

private void cboGrupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboGrupActionPerformed
// TODO add your handling code here:
    isiCombo();
}//GEN-LAST:event_cboGrupActionPerformed

private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
    try {
//        if (cboAkun.getSelectedItem().toString().equals("")) {
//            JOptionPane.showMessageDialog(null, "Akun Perkiraan Tidak Boleh Kosong.. !");
//            txtKodeAkun.requestFocus();
//        } else {
//            if (cekPerkiraan(cm, kodeakun[cboAkun.getSelectedIndex()])==1) {
//                JOptionPane.showMessageDialog(null, "Akun Perkiraan ini Sudah Dientrikan.. !");
//                txtKodeAkun.requestFocus();
//            } else {
        if (CheckOtomatis.isSelected()) {
            tambahjurnal();
        } else {
            if (cboDK.getSelectedIndex() == 0) {
                stat.execute("insert into rinciJurnal values('" + kodeakun[cboAkun.getSelectedIndex()] + "','" + namaAkun[cboAkun.getSelectedIndex()] + "'," + Double.parseDouble(txtBiaya.getValue().toString()) + ",0)");
            } else {
                stat.execute("insert into rinciJurnal values('" + kodeakun[cboAkun.getSelectedIndex()] + "','" + namaAkun[cboAkun.getSelectedIndex()] + "',0," + Double.parseDouble(txtBiaya.getValue().toString()) + ")");
            }
            reloadData();
        }
//            }
//        }
    } catch (NumberFormatException e) {
        System.out.println("errror1 " + e);
    }   catch (SQLException e) {
        System.out.println("errror1 " + e);
    }
}//GEN-LAST:event_btnInsertActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    try {
        // TODO add your handling code here:
        stat.execute("delete from rinciJurnal where KODEAKUN='" + jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString() + "'");
        reloadData();
    } catch (SQLException ex) {
        Logger.getLogger(FormJurnal.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_jButton1ActionPerformed

private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
// TODO add your handling code here:
}//GEN-LAST:event_jTable1MouseClicked

private void txtDebetCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtDebetCaretUpdate
// TODO add your handling code here:
    //txtSelisih.setValue(Double.parseDouble(txtDebet.getValue().toString()) - Double.parseDouble(txtKredit.getValue().toString()));
}//GEN-LAST:event_txtDebetCaretUpdate

private void txtKreditCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtKreditCaretUpdate
// TODO add your handling code here:
    //
}//GEN-LAST:event_txtKreditCaretUpdate

private void jTable3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable3KeyPressed
// TODO add your handling code here:
    if (evt.getKeyCode() == 10) {
        try {
            b = brgdao.getDetails(c, jTable3.getValueAt(jTable3.getSelectedRow(), 0).toString());
            bs = BarangstokDao.getDetailKodeBarang(c, b.getKODEBARANG());
            txtKodeBarang.setText(b.getKODEBARANG());
            txtNamaBarang.setText(b.getNAMABARANG());
            int jumlah = Integer.parseInt(jTable3.getValueAt(jTable3.getSelectedRow(), 3).toString());
            txtJumlah.setValue(jumlah);
            txtHarga.setValue(bs.getCOGS());
            txtJumlahBaru.setValue(jumlah);
            txtHargaBaru.setValue(bs.getCOGS());
            lblSatuan1.setText(b.getSATUAN());
            lblSatuan2.setText(b.getSATUAN1());
            lblSatuan3.setText(b.getSATUAN2());
            lblSatuan4.setText(b.getSATUAN());
            lblSatuan5.setText(b.getSATUAN());
            setKodebatch((jTable3.getValueAt(jTable3.getSelectedRow(), 4) == null) ? "" : jTable3.getValueAt(jTable3.getSelectedRow(), 4).toString());
            txtPersediaan.setValue(getPersediaan((Integer) txtJumlah.getValue(), (Integer) txtJumlahBaru.getValue(), (Double) txtHargaBaru.getValue()));
            jScrollPane3.setVisible(false);
            txtJumlahBaru.requestFocus();
        } catch (Exception ex) {
            System.out.println("errror " + ex);
        }
    }
}//GEN-LAST:event_jTable3KeyPressed

private void txtKodeBarangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKodeBarangActionPerformed
// TODO add your handling code here:
    jScrollPane3.setVisible(true);
    JDBCAdapter ja = new JDBCAdapter(c);
    String sql = "select BARANG.KODEBARANG,"
            + "BARANG.NAMABARANG,"
            + "bs.COGS, "
            + "CASEWHEN(KODEBATCH is null,bs.STOK,bsb.STOK) as STOK,"
            + "bsb.KODEBATCH , "
            + "bsb.EXPIRE,"
            + "bs.HARGAJUAL as `Jual`,JENISBARANG.JENIS as `Merk` "
            + "from BARANG,JENISBARANG,KATEGORI "
            + "inner join BARANGSTOK bs on bs.KODEBARANG=BARANG.KODEBARANG "
            + "left join BARANGSTOKBATCH bsb on bs.ID=bsb.IDBARANGSTOK "
            + "where BARANG.IDJENIS=JENISBARANG.ID "
            + "AND BARANG.IDKATEGORI=KATEGORI.IDKATEGORI "
            + "AND (BARANG.KODEBARANG like '" + txtKodeBarang.getText() + "%' "
            + "OR lower(BARANG.NAMABARANG) like '%" + txtKodeBarang.getText().toLowerCase() + "%' "
            + "OR bsb.KODEBATCH like '%" + txtKodeBarang.getText() + "%')";
    //ja.executeQuery("select KODEBARANG,NAMABARANG,COGS, STOK from BARANG where KODEBARANG like '" + txtKodeBarang.getText() + "%' or lower(NAMABARANG) like '%" + txtKodeBarang.getText().toLowerCase() + "%'");
    ja.executeQuery(sql);
    jScrollPane3.getViewport().remove(jTable3);
    jTable3 = new JTable(ja);
    jTable3.addKeyListener(new java.awt.event.KeyAdapter() {

        @Override
        public void keyPressed(java.awt.event.KeyEvent evt) {
            jTable3KeyPressed(evt);
        }
    });
    TableColumn col = jTable3.getColumnModel().getColumn(0);
    col.setPreferredWidth(40);
    col = jTable3.getColumnModel().getColumn(1);
    col.setPreferredWidth(150);
    col = jTable3.getColumnModel().getColumn(2);
    col.setPreferredWidth(90);
    col = jTable3.getColumnModel().getColumn(3);
    col.setPreferredWidth(40);
    jTable3.setFont(new Font("Tahoma", Font.BOLD, 12));
    jScrollPane3.getViewport().add(jTable3);
    jScrollPane3.repaint();
}//GEN-LAST:event_txtKodeBarangActionPerformed

private void txtKodeBarangKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtKodeBarangKeyPressed
// TODO add your handling code here:
    System.out.print(evt.getKeyCode());
    if (evt.getKeyCode() == 40) {
        jScrollPane3.setVisible(true);
        jTable3.requestFocus();
        jTable3.getSelectionModel().setSelectionInterval(0, 0);
    }
    if (evt.getKeyCode() == 27) {
        jScrollPane3.setVisible(false);
    }
}//GEN-LAST:event_txtKodeBarangKeyPressed

private void txtKodeAkunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKodeAkunActionPerformed
// TODO add your handling code here:
    isiCombo1();
}//GEN-LAST:event_txtKodeAkunActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// TODO add your handling code here:
    try {
        int x = JOptionPane.showConfirmDialog(this, "Apakah Data Disimpan?", "", JOptionPane.YES_NO_OPTION);
        if (x == 0) {
            if ((txtDeskripsi.getText().equals("")) || (Double.parseDouble(txtSelisih.getValue().toString()) != 0.00)) {
                JOptionPane.showMessageDialog(null, "Data Tidak Benar.. !");
                txtDeskripsi.requestFocus();
//            } else if (!KontrolTanggalDao.cekHarian(c, tglJurnal.getText())) {
//                JOptionPane.showMessageDialog(null, "Transaksi Tidak Bisa Dilakukan Karena :\n"
//                        + "1.Transaksi Untuk Tanggal Ini Sudah Tutup atau\n"
//                        + "2.Transaksi Untuk Tanggal Ini Belum Dibuka");
            } else {
                String tgl[] = Util.split(tglJurnal.getText(), "-");
                String per = tgl[0] + "." + Integer.parseInt(tgl[1]);
                if (cekperiodeAda(per)) {
                    if (cekperiode(per)) {
                        c.createStatement().execute("set autocommit false");
                        aksilog = "InsertJurnal";
                        prosesInsert();
                        prosesUpdateLog();
                        kosong();
                        kosongjurnal();
                        hapusTabel();
                        buatTabel();
                        reloadData();
                        c.commit();
                    } else {
                        JOptionPane.showMessageDialog(null, "Transaksi Untuk Periode Ini Sudah Di Tutup.. !");
                        txtDeskripsi.requestFocus();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Transaksi Untuk Periode Ini Belum Dibuka.. !");
                    txtDeskripsi.requestFocus();
                }
            }
        } else {
            txtDeskripsi.requestFocus();
        }
    } catch (SQLException e) {
        try {
            c.rollback();
            JOptionPane.showMessageDialog(null, "Rollback " + e.toString());
        } catch (SQLException ex) {
            Logger.getLogger(FKoreksiStokNew.class.getName()).log(Level.SEVERE, null, ex);
        }

        txtDeskripsi.requestFocus();
    } finally {
        try {
            c.createStatement().execute("set autocommit true");
        } catch (SQLException ex) {
            Logger.getLogger(FKoreksiStokNew.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}//GEN-LAST:event_jButton2ActionPerformed

private void txtHargaBaruFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHargaBaruFocusLost
    if (getFormatTextDouble(txtHargaBaru) < 0) {
        JOptionPane.showMessageDialog(null, "Harga Baru Tidak Boleh Minus.. !");
        txtJumlahBaru.requestFocus();
    } else {
        double hargabr = b.getHargaSatuan(lblSatuan1.getText(), getFormatTextDouble(txtHargaBaru));
        txtHargaBaru3.setValue(hargabr);
        txtPersediaan.setValue(getPersediaanHarga(Integer.parseInt(txtJumlah.getValue().toString()),Double.parseDouble(txtHarga.getValue().toString()) ,hargabr ));
        txtBiaya.setValue(Math.abs(getPersediaanHarga(Integer.parseInt(txtJumlah.getValue().toString()),Double.parseDouble(txtHarga.getValue().toString()) ,hargabr )));
    }
}//GEN-LAST:event_txtHargaBaruFocusLost

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        kosong();
        kosongjurnal();
        hapusTabel();
        buatTabel();
        reloadData();

    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKeluarActionPerformed
        dispose();
    }//GEN-LAST:event_btnKeluarActionPerformed

    private void txtBiayaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBiayaActionPerformed
        // TODO add your handling code here:
        btnInsert.requestFocus();
    }//GEN-LAST:event_txtBiayaActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        try {
            // TODO add your handling code here:
            stat.close();
            cm.close();
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(FKoreksiStokNew.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formInternalFrameClosing

    private void txtJumlahBaruKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtJumlahBaruKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtJumlahBaru1.requestFocus();
        }
    }//GEN-LAST:event_txtJumlahBaruKeyPressed

    private void txtJumlahBaru1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtJumlahBaru1KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            txtJumlahBaru2.requestFocus();
        }
    }//GEN-LAST:event_txtJumlahBaru1KeyPressed

    private void txtJumlahBaru2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtJumlahBaru2KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            txtDeskripsi.requestFocus();
        }
    }//GEN-LAST:event_txtJumlahBaru2KeyPressed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        pilihKoreksiStok();
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
        jRadioButton1.setSelected(false);
        jRadioButton2.setSelected(true);
        txtHargaBaru.setEnabled(true);
        txtJumlahBaru.setEnabled(false);
        txtJumlahBaru1.setEnabled(false);
        txtJumlahBaru2.setEnabled(false);
        kosong();
        kosongjurnal();
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void txtHargaBaru1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHargaBaru1FocusLost
        // TODO add your handling code here:
        if (getFormatTextDouble(txtHargaBaru1) < 0) {
            JOptionPane.showMessageDialog(null, "Harga Baru Tidak Boleh Minus.. !");
            txtJumlahBaru.requestFocus();
        } else {
            double hargabr = b.getHargaSatuan(lblSatuan2.getText(), getFormatTextDouble(txtHargaBaru1));
            txtHargaBaru3.setValue(hargabr);
            txtPersediaan.setValue(getPersediaanHarga(Integer.parseInt(txtJumlah.getValue().toString()),Double.parseDouble(txtHarga.getValue().toString()) ,hargabr ));
            txtBiaya.setValue(Math.abs(getPersediaanHarga(Integer.parseInt(txtJumlah.getValue().toString()),Double.parseDouble(txtHarga.getValue().toString()) ,hargabr )));

        }
    }//GEN-LAST:event_txtHargaBaru1FocusLost

    private void txtHargaBaru2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHargaBaru2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHargaBaru2ActionPerformed

    private void txtHargaBaru2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHargaBaru2FocusLost
        // TODO add your handling code here:
        if (getFormatTextDouble(txtHargaBaru2) < 0) {
            JOptionPane.showMessageDialog(null, "Harga Baru Tidak Boleh Minus.. !");
            txtJumlahBaru.requestFocus();
        } else {
            double hargabr = b.getHargaSatuan(lblSatuan3.getText(), getFormatTextDouble(txtHargaBaru2));
            txtHargaBaru3.setValue(hargabr);
            txtPersediaan.setValue(getPersediaanHarga(Integer.parseInt(txtJumlah.getValue().toString()),Double.parseDouble(txtHarga.getValue().toString()) ,hargabr ));
            txtBiaya.setValue(Math.abs(getPersediaanHarga(Integer.parseInt(txtJumlah.getValue().toString()),Double.parseDouble(txtHarga.getValue().toString()) ,hargabr )));
        }
    }//GEN-LAST:event_txtHargaBaru2FocusLost

    private void txtHargaBaru3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHargaBaru3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHargaBaru3ActionPerformed

    private void txtHargaBaru3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHargaBaru3FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHargaBaru3FocusLost

    private void txtJumlahBaruFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtJumlahBaruFocusLost
        // TODO add your handling code here:
        System.out.println("jum " + txtJumlahBaru.getText().length());
        if (txtJumlahBaru.getText().length() > 0) {
            if (getFormatTextInteger(txtJumlahBaru) < 0) {
                JOptionPane.showMessageDialog(null, "Jumlah Baru Tidak Boleh Minus.. !");
                txtJumlahBaru.requestFocus();
            } else {
                int jumlah1 = (txtJumlahBaru.getText().equals("") || txtJumlahBaru.getValue() == null) ? 0 : getFormatTextInteger(txtJumlahBaru);
                int jumlah2 = (txtJumlahBaru1.getText().equals("") || txtJumlahBaru1.getValue() == null) ? 0 : getFormatTextInteger(txtJumlahBaru1);
                int jumlah3 = (txtJumlahBaru2.getText().equals("") || txtJumlahBaru2.getValue() == null) ? 0 : getFormatTextInteger(txtJumlahBaru2);
                try {
                    hitung(b, jumlah1, jumlah2, jumlah3);
                } catch (Exception ex) {
                    Logger.getLogger(FKoreksiStokNew.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_txtJumlahBaruFocusLost

    private void txtJumlahBaru1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtJumlahBaru1FocusLost
        // TODO add your handling code here:
        if (txtJumlahBaru1.getText().length() > 0) {
            if (getFormatTextInteger(txtJumlahBaru1) < 0) {
                JOptionPane.showMessageDialog(null, "Jumlah Baru Tidak Boleh Minus.. !");
                txtJumlahBaru2.requestFocus();
            } else {
                int jumlah1 = (txtJumlahBaru.getText().equals("") || txtJumlahBaru.getValue() == null) ? 0 : getFormatTextInteger(txtJumlahBaru);
                int jumlah2 = (txtJumlahBaru1.getText().equals("") || txtJumlahBaru1.getValue() == null) ? 0 : getFormatTextInteger(txtJumlahBaru1);
                int jumlah3 = (txtJumlahBaru2.getText().equals("") || txtJumlahBaru2.getValue() == null) ? 0 : getFormatTextInteger(txtJumlahBaru2);
                try {
                    hitung(b, jumlah1, jumlah2, jumlah3);
                } catch (Exception ex) {
                    Logger.getLogger(FKoreksiStokNew.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_txtJumlahBaru1FocusLost

    private void txtJumlahBaru2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtJumlahBaru2FocusLost
        // TODO add your handling code here:
        if (txtJumlahBaru2.getText().length() > 0 || txtJumlahBaru2.getText() != null) {
            if (getFormatTextInteger(txtJumlahBaru2) < 0) {
                JOptionPane.showMessageDialog(null, "Jumlah Baru Tidak Boleh Minus.. !");
                txtJumlahBaru1.requestFocus();
            } else {
                int jumlah1 = (txtJumlahBaru.getText().equals("") || txtJumlahBaru.getValue() == null) ? 0 : getFormatTextInteger(txtJumlahBaru);
                int jumlah2 = (txtJumlahBaru1.getText().equals("") || txtJumlahBaru1.getValue() == null) ? 0 : getFormatTextInteger(txtJumlahBaru1);
                int jumlah3 = (txtJumlahBaru2.getText().equals("") || txtJumlahBaru2.getValue() == null) ? 0 : getFormatTextInteger(txtJumlahBaru2);
                try {
                    hitung(b, jumlah1, jumlah2, jumlah3);
                } catch (Exception ex) {
                    Logger.getLogger(FKoreksiStokNew.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_txtJumlahBaru2FocusLost

    private void txtHargaBaruKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHargaBaruKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtHargaBaru1.setText("0");
            txtHargaBaru2.setText("0");
            txtDeskripsi.requestFocus();
        }
    }//GEN-LAST:event_txtHargaBaruKeyPressed

    private void txtHargaBaru1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHargaBaru1KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtHargaBaru.setText("0");
            txtHargaBaru2.setText("0");
            txtDeskripsi.requestFocus();
        }
    }//GEN-LAST:event_txtHargaBaru1KeyPressed

    private void txtHargaBaru2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHargaBaru2KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtHargaBaru.setText("0");
            txtHargaBaru1.setText("0");
            txtDeskripsi.requestFocus();
        }
    }//GEN-LAST:event_txtHargaBaru2KeyPressed

    void isiCombo() {
        cboAkun.removeAllItems();
        //cboBank.removeAllItems();
        Statement stat1 = null;
        String sql = "select * from PERKIRAAN where (TIPE='D' or TIPE='SD') and GRUP=" + (cboGrup.getSelectedIndex() + 1) + " order by 2";
        try {
            stat1 = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = stat1.executeQuery(sql);
            int j = 0;
            if (rs.last()) {
                j = rs.getRow();
            }
            if (j > 0) {
                kodeakun = new String[j];
                namaAkun = new String[j];
                rs.beforeFirst();
                int c2 = 0;
                while (rs.next()) {
                    cboAkun.addItem(rs.getString(1) + "-" + rs.getString(2));
                    kodeakun[c2] = rs.getString(1);
                    namaAkun[c2] = rs.getString(2);
                    c2++;
                }
            }//            
        } catch (SQLException ex) {
            Logger.getLogger(FormJurnal.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                stat1.close();
            } catch (SQLException ex) {
                Logger.getLogger(FKoreksiStokNew.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void isiCombo1() {
        cboAkun.removeAllItems();
        //cboBank.removeAllItems();
        String sql = "select * from PERKIRAAN where (TIPE='D' or TIPE='SD') and (kodeperkiraan like '%" + txtKodeAkun.getText() + "%' OR lower(NAMAPERKIRAAN) like '%" + txtKodeAkun.getText().toLowerCase() + "%') order by 2";
        try {
            Statement stat1 = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = stat1.executeQuery(sql);
            int j = 0;
            if (rs.last()) {
                j = rs.getRow();
            }
            if (j > 0) {
                kodeakun = new String[j];
                namaAkun = new String[j];
                rs.beforeFirst();
                int c1 = 0;
                while (rs.next()) {
                    cboAkun.addItem(rs.getString(1) + "-" + rs.getString(2));
                    kodeakun[c1] = rs.getString(1);
                    namaAkun[c1] = rs.getString(2);
                    c1++;
                }
            }
            stat1.close();
        } catch (SQLException ex) {
            Logger.getLogger(FormJurnal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void reloadData() {
        JDBCAdapter j = new JDBCAdapter(cm);
        j.executeQuery("select * from rinciJurnal");
        jScrollPane1.getViewport().remove(jTable1);
        jTable1 = new JTable(j);
        jTable1.setFont(new Font("Tahoma", Font.BOLD, 12));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setFocusable(false);
        jTable1.setFocusable(false);
        jTable1.getColumnModel().getColumn(2).setCellRenderer(new DecimalFormatRenderer());
        jTable1.getColumnModel().getColumn(3).setCellRenderer(new DecimalFormatRenderer());
        jTable1.setFont(new Font("Tahoma", Font.BOLD, 11));
        jScrollPane1.getViewport().add(jTable1);
        jScrollPane1.repaint();
        try {
            Tdebet = 0;
            Tkredit = 0;
            ResultSet rs = stat.executeQuery("select * from rinciJurnal");
            while (rs.next()) {
                //System.out.println(rs.getString(3) + "--- "+rs.getString(4));
                Tdebet += toDesimal(rs.getDouble(3));
                Tkredit += toDesimal(rs.getDouble(4));
                txtDebet.setValue(toDesimal(Tdebet));
                txtKredit.setValue(toDesimal(Tkredit));
            }
            double selisih = toDesimal(Tdebet) - toDesimal(Tkredit);
            //double selisih = Double.parseDouble(txtDebet.getValue().toString()) - Double.parseDouble(txtKredit.getValue().toString());
            txtSelisih.setValue(selisih);
            //System.out.println(Tdebet + "--- "+toDesimal(Tkredit) +" ="+toDesimal(selisih));
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(FormJurnal.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            j.close();
        } catch (SQLException ex) {
            Logger.getLogger(FKoreksiStokNew.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static double toDesimal(double a) {
        DecimalFormat df = new DecimalFormat("###.00");
        return Double.parseDouble(df.format(a));
    }

    void buatTabel() {
        String sqlCreate = "create table rinciJurnal (KODEAKUN varchar(20),PERKIRAAN varchar(200), "
                + "DEBET double, "
                + "KREDIT double)";
        try {
            stat.execute(sqlCreate);
        } catch (SQLException ex) {
            Logger.getLogger(FormPenjualan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void hapusTabel() {
        try {
            stat.execute("drop table rinciJurnal");
        } catch (SQLException ex) {
        }
    }

    void kosong() {
        txtKodeBarang.setText("");
        txtNamaBarang.setText("");
        txtJumlah.setText("0");
        txtHarga.setText("0");
        txtJumlahBaru.setText("");
        txtJumlahBaru1.setText("");
        txtJumlahBaru2.setText("");
        txtHargaBaru.setText("0");
        txtHargaBaru3.setText("0");
        txtBiaya.setText("0");
        lblSatuan1.setText("");
        lblSatuan2.setText("");
        lblSatuan3.setText("");
        lblSatuan4.setText("");
        lblSatuan5.setText("");
        txtJumlahTotal.setText("");
        txtKodeBarang.requestFocus();
    }

    void kosongjurnal() {
        txtKodeJurnal.setText("");
        txtDeskripsi.setText("Koreksi Stok Awal");
        txtKodeAkun.setText("");
        txtBiaya.setText("");
        txtPersediaan.setText("");
        txtDebet.setText("");
        txtKredit.setText("");
        txtSelisih.setText("");
        cboDK.setSelectedIndex(0);
        setKodeJurnal();
    }

    void setKodeJurnal() {
        String tgl = com.erv.function.Util.toDateStringSql(new Date());
        try {
            IDJurnal = jurnalDao.getIDJurnal(c);
            //txtKodeJurnal.setText("KR" + com.erv.function.Util.getbln(tgl) + com.erv.function.Util.getthn(tgl) + IDJurnal);
            txtKodeJurnal.setText(jurnalDao.getGenKodeJurnal(c, "KS"));
        } catch (SQLException ex) {
            Logger.getLogger(FormPenjualan.class.getName()).log(Level.SEVERE, null, ex);
        }
//        String tgl = com.erv.function.Util.toDateStringSql(new Date());
//        try {
//            IDJurnal = jurnalDao.getIDJurnal(c);
//            txtKodeJurnal.setText("KR" + com.erv.function.Util.getbln(tgl) + com.erv.function.Util.getthn(tgl) + IDJurnal);
//        } catch (SQLException ex) {
//            Logger.getLogger(FormPenjualan.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    public double getFormatTextDouble(JFormattedTextField t) {
        double h = 0;
        if (t.getValue() != null) {
            h = Double.parseDouble(t.getValue().toString());
        }
        return h;
    }

    public double getTextDouble(JTextField t) {
        double h = 0;
        if (t.getText() != null) {
            h = Double.parseDouble(t.getText());
        }
        return h;
    }

    public int getTextInteger(JTextField t) {
        int h = 0;
        if (t.getText() != null || t.getText().length() > 0) {
            h = Integer.parseInt(t.getText());
        }
        return h;
    }

    public int getFormatTextInteger(JFormattedTextField t) {
        int h = 0;
        if (t.getValue() != null || t.getText().length() > 0) {
            h = Integer.parseInt(t.getText());
        }
        return h;
    }

    public boolean cekperiode(String periode) throws SQLException {
        //String periode = thn + "." + bln;
        boolean hasil1 = false;
        Statement s = c.createStatement();
        ResultSet rs = s.executeQuery("select * from KONTROLPERIODE where PERIODE='" + periode + "' and STATUSSTOK='1'");
        if (rs.next()) {
            if (rs.getString(1) != null) {
                hasil1 = true;
            }
        }
        rs.close();
        s.close();
        return hasil1;
    }

    public boolean cekperiodeAda(String bul) throws SQLException {
        //String periode = thn + "." + bln;
        boolean ada = false;
        Statement s = c.createStatement();
        ResultSet rs = s.executeQuery("select * from KONTROLPERIODE where PERIODE='" + bul + "'");
        if (rs.next()) {
            if (rs.getString(1) != null) {
                ada = true;
            }
        }
        rs.close();
        s.close();
        return ada;
    }

    void prosesUpdateLog() throws SQLException {
        //java.sql.Date tanggallog;
        String tanggallog;
        String jamlog = u.jamsekarang + ":" + u.menitsekarang + ":" + u.detiksekarang;
        //tanggallog = java.sql.Date.valueOf(u.thnsekarang + "-" + u.blnsekarang + "-" + u.tglsekarang);
        tanggallog = u.thnsekarang + "-" + u.blnsekarang + "-" + u.tglsekarang;
        String ketlog = "";
        lh.setUSERIDENTITY(JavarieSoftApp.jenisuser);
        lh.setTANGGAL(tanggallog);
        lh.setJAM(jamlog);
        lh.setTABEL("TJURNAL");
        lh.setNOREFF(txtKodeJurnal.getText());
        lh.setAKSI(aksilog);
        if (aksilog.equals("InsertJurnal")) {
            ketlog = "Insert Data Jurnal " + txtKodeJurnal.getText() + " Tanggal " + java.sql.Date.valueOf(tglJurnal.getText()) + " Deskripsi " + txtDeskripsi.getText();
        } else if (aksilog.equals("Update")) {
            ketlog = "Update Data Jurnal " + txtKodeJurnal.getText();
        } else if (aksilog.equals("Delete")) {
            ketlog = "Delete Data Jurnal " + txtKodeJurnal.getText();
        }
        lh.setKETERANGAN(ketlog);
        lhdao.insert(c, lh);

    }

    void prosesInsert() throws SQLException {
        String tgl = com.erv.function.Util.toDateStringSql(new Date());
        String kdjrn = "";
//            IDJurnal = jurnalDao.getIDJurnal(c);
//            txtKodeJurnal.setText("KR" + com.erv.function.Util.getbln(tgl) + com.erv.function.Util.getthn(tgl) + IDJurnal);

//            int idtemp = jurnalDao.getIDJurnal(c);
//            if (idtemp >= IDJurnal) {
        IDjrn = jurnalDao.getIDJurnal(c);
        kdjrn = jurnalDao.getGenKodeJurnal(c, "KS");
//        kdjrn = "KR" + com.erv.function.Util.getbln(tgl) + com.erv.function.Util.getthn(tgl) + IDJurnal;
        jurnal j = new jurnal();
        if (jRadioButton1.isSelected()) {
            stok s = new stok();
           

            int jumlah = Integer.parseInt(txtJumlah.getText());
            int jumlahBaru = Integer.parseInt(txtJumlahTotal.getText());
//        double hrglama = Double.parseDouble(txtHarga.getValue().toString());
//        double hrgbaru = Double.parseDouble(txtHargaBaru3.getValue().toString());
            s.setIDPENJUALAN(getIDKoreksi());
            s.setKODEBARANG(txtKodeBarang.getText());
            s.setTANGGAL(tglJurnal.getText());
            s.setIN((jumlahBaru < jumlah) ? 0 : (jumlahBaru - jumlah));
            s.setOUT((jumlahBaru < jumlah) ? (jumlah - jumlahBaru) : 0);
            s.setKODETRANS("Z");
            s.setKODEBATCH(getKodebatch());
            //j.setID(IDJurnal);
            j.setID(IDjrn);
            j.setKODEJURNAL(kdjrn);
            //j.setKODEJURNAL(txtKodeJurnal.getText());
            j.setTANGGAL(tglJurnal.getText());
            j.setDESKRIPSI(txtDeskripsi.getText() + " " + txtKodeBarang.getText());

            Statement st = cm.createStatement();
            ResultSet rs;
            if (jumlah == jumlahBaru) {
                jurnalDao.insertIntoJURNAL(c, j);
                String sql = "update barangstok set COGS=? where KODEBARANG=?";
                PreparedStatement statement = c.prepareStatement(sql);
                statement.setDouble(1, Double.parseDouble(txtHargaBaru.getValue().toString()));
                statement.setString(2, txtKodeBarang.getText());
                statement.executeUpdate();
                statement.close();

                rs = st.executeQuery("select * from rinciJurnal");
                rincijurnal r = new rincijurnal();
                int count = 1;
                while (rs.next()) {
//                    r.setKODEJURNAL("" + IDJurnal);
                    r.setKODEJURNAL("" + IDjrn);
                    r.setKODEPERKIRAAN(rs.getString(1));
                    r.setDEBET(rs.getDouble(3));
                    r.setKREDIT(rs.getDouble(4));
                    r.setNO(count);
                    r.setREF("");
                    rincijurnalDao.insertIntoRINCIJURNAL(c, r);
                }
            } else if (jumlah != jumlahBaru) {
                stokDao.insertIntoSTOK(c, s);
                jurnalDao.insertIntoJURNAL(c, j);
                String sql = "update barangstok set COGS=? where KODEBARANG=?";
                PreparedStatement statement = c.prepareStatement(sql);
                statement.setDouble(1, Double.parseDouble(txtHargaBaru.getValue().toString()));
                statement.setString(2, txtKodeBarang.getText());
                statement.executeUpdate();
                statement.close();

                rs = st.executeQuery("select * from rinciJurnal");
                rincijurnal r = new rincijurnal();
                int count = 0;
                while (rs.next()) {
//                    r.setKODEJURNAL("" + IDJurnal);
                    r.setKODEJURNAL("" + IDjrn);
                    r.setKODEPERKIRAAN(rs.getString(1));
                    r.setDEBET(rs.getDouble(3));
                    r.setKREDIT(rs.getDouble(4));
                    r.setNO(count);
                    r.setREF("");
                    rincijurnalDao.insertIntoRINCIJURNAL(c, r);
                }
            } else {
                stokDao.insertIntoSTOK(c, s);
                jurnalDao.insertIntoJURNAL(c, j);
                //Statement st = cm.createStatement();
                rs = st.executeQuery("select * from rinciJurnal");
                rincijurnal r = new rincijurnal();
                int count = 1;
                while (rs.next()) {
//                    r.setKODEJURNAL("" + IDJurnal);
                    r.setKODEJURNAL("" + IDjrn);
                    r.setKODEPERKIRAAN(rs.getString(1));
                    r.setDEBET(rs.getDouble(3));
                    r.setKREDIT(rs.getDouble(4));
                    r.setNO(count);
                    r.setREF("");
                    rincijurnalDao.insertIntoRINCIJURNAL(c, r);
                    count++;
                }
            }
            kosong();
            kosongjurnal();
            rs.close();
            st.close();
        }
        if (jRadioButton2.isSelected()) {
            j.setID(IDjrn);
            j.setKODEJURNAL(kdjrn);
            //j.setKODEJURNAL(txtKodeJurnal.getText());
            j.setTANGGAL(tglJurnal.getText());
            j.setDESKRIPSI(txtDeskripsi.getText() + " " + txtKodeBarang.getText());
            jurnalDao.insertIntoJURNAL(c, j);
            String sql = "update barangstok set COGS=? where KODEBARANG=?";
            PreparedStatement statement = c.prepareStatement(sql);
            statement.setDouble(1, Double.parseDouble(txtHargaBaru3.getValue().toString()));
            statement.setString(2, txtKodeBarang.getText());
            statement.executeUpdate();
            statement.close();
            ResultSet rs;
            Statement stat = cm.createStatement();
            rs = stat.executeQuery("select * from rinciJurnal");
            rincijurnal r = new rincijurnal();
            int count = 1;
            while (rs.next()) {
//                r.setKODEJURNAL("" + IDJurnal);
                r.setKODEJURNAL("" + IDjrn);
                r.setKODEPERKIRAAN(rs.getString(1));
                r.setDEBET(rs.getDouble(3));
                r.setKREDIT(rs.getDouble(4));
                r.setNO(count);
                r.setREF("");
                rincijurnalDao.insertIntoRINCIJURNAL(c, r);
            }
            rs.close();
            stat.close();
        }
    }

    int getIDKoreksi() {
        int temp = 1;
        try {
            Statement s = c.createStatement();
            ResultSet r = s.executeQuery("SELECT max(IDPENJUALAN) FROM STOK where KODETRANS='Z'");
            if (r.next()) {
                if (r.getString(1) != null) {
                    temp = r.getInt(1) + 1;
                }
            }
            r.close();
            s.close();
        } catch (SQLException ex) {
            Logger.getLogger(FKoreksiStokNew.class.getName()).log(Level.SEVERE, null, ex);
        }
        return temp;
    }

    double getPersediaan(int jumlah, int jumlahbaru, double harga) {
        double tot = 0;
        tot = Math.abs(jumlahbaru - jumlah) * harga;
        return tot;
    }

    double getPersediaanHarga(int jumlah, double hargalama, double hargabaru) {
        double tot = 0;
        tot = Math.abs(hargabaru - hargalama) * jumlah;
        return tot;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CheckOtomatis;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnKeluar;
    private javax.swing.JComboBox cboAkun;
    private javax.swing.JComboBox cboDK;
    private javax.swing.JComboBox cboGrup;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable3;
    private javax.swing.JLabel lblSatuan1;
    private javax.swing.JLabel lblSatuan2;
    private javax.swing.JLabel lblSatuan3;
    private javax.swing.JLabel lblSatuan4;
    private javax.swing.JLabel lblSatuan5;
    private com.erv.function.PanelCool panelCool1;
    private datechooser.beans.DateChooserCombo tglJurnal;
    private javax.swing.JFormattedTextField txtBiaya;
    private javax.swing.JFormattedTextField txtDebet;
    private javax.swing.JTextField txtDeskripsi;
    private javax.swing.JFormattedTextField txtHarga;
    private javax.swing.JFormattedTextField txtHargaBaru;
    private javax.swing.JFormattedTextField txtHargaBaru1;
    private javax.swing.JFormattedTextField txtHargaBaru2;
    private javax.swing.JFormattedTextField txtHargaBaru3;
    private javax.swing.JFormattedTextField txtJumlah;
    private javax.swing.JFormattedTextField txtJumlahBaru;
    private javax.swing.JFormattedTextField txtJumlahBaru1;
    private javax.swing.JFormattedTextField txtJumlahBaru2;
    private javax.swing.JLabel txtJumlahTotal;
    private javax.swing.JTextField txtKodeAkun;
    private javax.swing.JTextField txtKodeBarang;
    private javax.swing.JTextField txtKodeJurnal;
    private javax.swing.JFormattedTextField txtKredit;
    private javax.swing.JTextField txtNamaBarang;
    private javax.swing.JFormattedTextField txtPersediaan;
    private javax.swing.JFormattedTextField txtSelisih;
    // End of variables declaration//GEN-END:variables

    void tambahjurnal() {
        try {
            String akunpersediaan = "", akunmodalsetor = "";
            Statement s;
            s = cm.createStatement();
            s.execute("set autocommit false");
//            try {
//                p = dbperkiraan.getDetails("11310");
//                akunpersediaan = p.getNAMAPERKIRAAN();
//                p = dbperkiraan.getDetails("31101");
//                akunmodalsetor = p.getNAMAPERKIRAAN();
//            } catch (ClassNotFoundException ex) {
//                Logger.getLogger(FKoreksiStok.class.getName()).log(Level.SEVERE, null, ex);
//            }
            if (jRadioButton1.isSelected()) {
                int jumlah = Integer.parseInt(txtJumlah.getText());
                int jumlahBaru = Integer.parseInt(txtJumlahBaru.getText());

                if (jumlah < jumlahBaru) {
                    s.addBatch("insert into rinciJurnal values('11310','PERSEDIAAN BARANG DAGANGAN'," + Double.parseDouble(txtBiaya.getValue().toString()) + ",0)");
                    s.addBatch("insert into rinciJurnal values('31101','MODAL DISETOR',0," + Double.parseDouble(txtBiaya.getValue().toString()) + ")");
                    s.executeBatch();
                } else {
                    s.addBatch("insert into rinciJurnal values('31101','MODAL DISETOR'," + Double.parseDouble(txtBiaya.getValue().toString()) + ",0)");
                    s.addBatch("insert into rinciJurnal values('11310','PERSEDIAAN BARANG DAGANGAN',0," + Double.parseDouble(txtBiaya.getValue().toString()) + ")");
                    s.executeBatch();
                }
            } else if (jRadioButton2.isSelected()) {
                double Hmodal = Double.parseDouble(txtHarga.getValue().toString());
                double Hmodalbaru = Double.parseDouble(txtHargaBaru3.getValue().toString());
                if (Hmodal < Hmodalbaru) {
                    s.addBatch("insert into rinciJurnal values('11310','PERSEDIAAN BARANG DAGANGAN'," + Double.parseDouble(txtBiaya.getValue().toString()) + ",0)");
                    s.addBatch("insert into rinciJurnal values('31101','MODAL DISETOR',0," + Double.parseDouble(txtBiaya.getValue().toString()) + ")");
                    s.executeBatch();
                } else {
                    s.addBatch("insert into rinciJurnal values('31101','MODAL DISETOR'," + Double.parseDouble(txtBiaya.getValue().toString()) + ",0)");
                    s.addBatch("insert into rinciJurnal values('11310','PERSEDIAAN BARANG DAGANGAN',0," + Double.parseDouble(txtBiaya.getValue().toString()) + ")");
                    s.executeBatch();
                }
            }
            c.commit();
            s.execute("set autocommit true");
            s.close();
            reloadData();
        } catch (SQLException ex) {
            try {
                c.rollback();
                JOptionPane.showMessageDialog(null, "Rollback Gagal.. !" + ex.toString());
            } catch (SQLException ex1) {
                //JOptionPane.showMessageDialog(null, "Jurnal Ok.. !");
            }
//            Logger.getLogger(FKoreksiStok.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public boolean cekPerkiraan(Connection cm, int kode) {
        boolean hasil = false;
        try {
            Statement st = cm.createStatement();
            ResultSet rs = st.executeQuery("select KODEAKUN from rincijurnal where KODEAKUN='" + kode + "'");
            if (rs.next()) {
                if (rs.getString(1) != null) {
                    hasil = true;
                }
            }
        } catch (SQLException ex) {
            System.out.println(ex.toString());
        }

        return hasil;
    }

    private void hitung(barang br, int satuan1, int satuan2, int satuan3) throws Exception {
        int jumlahkecil = br.getJumlahKecil(satuan1, satuan2, satuan3);
        lblSatuan4.setText("" + br.getSATUAN());
        txtJumlahTotal.setText("" + jumlahkecil);
        int jumlah = (Integer) txtJumlah.getValue();
        double harga = (Double) txtHarga.getValue();
        txtPersediaan.setValue(getPersediaan(jumlah, jumlahkecil, harga));
        txtBiaya.setValue(Math.abs(getPersediaan(jumlah, jumlahkecil, harga)));
    }

    void pilihKoreksiStok() {
        jRadioButton1.setSelected(true);
        jRadioButton2.setSelected(false);
        txtHargaBaru.setEnabled(false);
        txtJumlahBaru.setEnabled(true);
        txtJumlahBaru1.setEnabled(true);
        txtJumlahBaru2.setEnabled(true);
    }
}
