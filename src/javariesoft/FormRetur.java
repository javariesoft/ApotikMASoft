/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javariesoft;

import com.eigher.db.loghistoryDao;
import com.eigher.model.loghistory;
import com.erv.db.hutangDao;
import com.erv.db.hutangbayarDao;
import com.erv.db.jurnalDao;
import com.erv.db.koneksi;
import com.erv.db.pelangganDao;
import com.erv.db.piutangDao;
import com.erv.db.piutangbayarDao;
import com.erv.db.returDao;
import com.erv.db.returbeliDao;
import com.erv.db.returbelirinciDao;
import com.erv.db.settingDao;
import com.erv.db.stokDao;
import com.erv.db.supplierDao;
import com.erv.function.ArrayTable;
import com.erv.function.ExecuteQuery;
import com.erv.function.JDBCAdapter;
import com.erv.function.Util;
import com.erv.fungsi.DecimalFormatRenderer;
import com.erv.model.hutang;
import com.erv.model.hutangbayar;
import com.erv.model.jurnal;
import com.erv.model.piutang;
import com.erv.model.piutangbayar;
import com.erv.model.retur;
import com.erv.model.returbeli;
import com.erv.model.returbelirinci;
import com.erv.model.stok;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableColumn;

/**
 *
 * @author TI-PNP
 */
public class FormRetur extends javax.swing.JInternalFrame implements ListSelectionListener {

    Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
    java.text.DateFormat d = new SimpleDateFormat("yyyy-MM-dd");
    double totalhutang = 0, ttotalbayar = 0, total = 0, diskont = 0, tppn = 0;
    double totalpiutang = 0, hpp = 0;
    int IDJurnal = 0;

    /**
     * Creates new form FormRetur
     */
    public FormRetur() {
        initComponents();
        setSize(dim.width, dim.height);
        setLocation(0, 0);
        setLayar();
        //reloaddata();
        tanggal.setVisible(true);
        txtKriteria.setVisible(false);
        tanggal.setDateFormat(d);
        tabelData.getSelectionModel().addListSelectionListener(this);
        pilih(0);
        cektombol();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelCool1 = new com.erv.function.PanelCool();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cboRetur = new javax.swing.JComboBox();
        cboKriteria = new javax.swing.JComboBox();
        txtKriteria = new javax.swing.JTextField();
        tanggal = new datechooser.beans.DateChooserCombo();
        btnFilter = new javax.swing.JButton();
        btnValidasi = new javax.swing.JButton();
        btnDeleteValidasi = new javax.swing.JButton();
        btnBatalRetur = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelData = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        dataRinci = new javax.swing.JTable();

        setClosable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(javariesoft.JavarieSoftApp.class).getContext().getResourceMap(FormRetur.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        panelCool1.setName("panelCool1"); // NOI18N
        panelCool1.setLayout(null);

        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(1113, 73));

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 20));

        cboRetur.setFont(resourceMap.getFont("cboRetur.font")); // NOI18N
        cboRetur.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Penjualan", "Pembelian" }));
        cboRetur.setName("cboRetur"); // NOI18N
        cboRetur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboReturActionPerformed(evt);
            }
        });

        cboKriteria.setFont(resourceMap.getFont("cboKriteria.font")); // NOI18N
        cboKriteria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Kode Retur", "Tanggal", "Pelanggan" }));
        cboKriteria.setName("cboKriteria"); // NOI18N
        cboKriteria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboKriteriaActionPerformed(evt);
            }
        });

        txtKriteria.setFont(resourceMap.getFont("txtKriteria.font")); // NOI18N
        txtKriteria.setText(resourceMap.getString("txtKriteria.text")); // NOI18N
        txtKriteria.setName("txtKriteria"); // NOI18N
        txtKriteria.setPreferredSize(new java.awt.Dimension(200, 26));

        tanggal.setFieldFont(resourceMap.getFont("tanggal.dch_combo_fieldFont")); // NOI18N

        btnFilter.setFont(resourceMap.getFont("btnFilter.font")); // NOI18N
        btnFilter.setIcon(resourceMap.getIcon("btnFilter.icon")); // NOI18N
        btnFilter.setText(resourceMap.getString("btnFilter.text")); // NOI18N
        btnFilter.setName("btnFilter"); // NOI18N
        btnFilter.setPreferredSize(new java.awt.Dimension(80, 29));
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        btnValidasi.setFont(resourceMap.getFont("btnValidasi.font")); // NOI18N
        btnValidasi.setIcon(resourceMap.getIcon("btnValidasi.icon")); // NOI18N
        btnValidasi.setText(resourceMap.getString("btnValidasi.text")); // NOI18N
        btnValidasi.setName("btnValidasi"); // NOI18N
        btnValidasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidasiActionPerformed(evt);
            }
        });

        btnDeleteValidasi.setFont(resourceMap.getFont("btnDeleteValidasi.font")); // NOI18N
        btnDeleteValidasi.setIcon(resourceMap.getIcon("btnDeleteValidasi.icon")); // NOI18N
        btnDeleteValidasi.setText(resourceMap.getString("btnDeleteValidasi.text")); // NOI18N
        btnDeleteValidasi.setName("btnDeleteValidasi"); // NOI18N
        btnDeleteValidasi.setPreferredSize(new java.awt.Dimension(80, 29));
        btnDeleteValidasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteValidasiActionPerformed(evt);
            }
        });

        btnBatalRetur.setFont(resourceMap.getFont("btnBatalRetur.font")); // NOI18N
        btnBatalRetur.setIcon(resourceMap.getIcon("btnBatalRetur.icon")); // NOI18N
        btnBatalRetur.setText(resourceMap.getString("btnBatalRetur.text")); // NOI18N
        btnBatalRetur.setName("btnBatalRetur"); // NOI18N
        btnBatalRetur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatalReturActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(cboRetur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(cboKriteria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(txtKriteria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(tanggal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(btnFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnValidasi, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(btnBatalRetur, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDeleteValidasi, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(cboRetur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(cboKriteria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(txtKriteria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(tanggal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(btnFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnValidasi, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeleteValidasi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBatalRetur, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(16, 16, 16))
        );

        panelCool1.add(jPanel2);
        jPanel2.setBounds(10, 10, 1115, 50);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tabelData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tabelData.setName("tabelData"); // NOI18N
        tabelData.setRowHeight(30);
        tabelData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelDataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelData);

        panelCool1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 70, 1050, 300);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        dataRinci.setName("dataRinci"); // NOI18N
        jScrollPane2.setViewportView(dataRinci);

        panelCool1.add(jScrollPane2);
        jScrollPane2.setBounds(10, 390, 1050, 290);

        getContentPane().add(panelCool1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboKriteriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboKriteriaActionPerformed
        // TODO add your handling code here:
        pilihKriteria(cboKriteria.getSelectedIndex());
    }//GEN-LAST:event_cboKriteriaActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        try {
            // TODO add your handling code here:
            Connection c = koneksi.getKoneksiJ();
            reloaddata(c, cboRetur.getSelectedIndex());

            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnFilterActionPerformed

    private void btnDeleteValidasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteValidasiActionPerformed
        // TODO add your handling code here:
        Connection c = null;

        try {
            c = koneksi.getKoneksiJ();
            c.createStatement().execute("set autocommit false");
            int id = Integer.parseInt(tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString());
            String tgal[] = Util.split(tabelData.getValueAt(tabelData.getSelectedRow(), 2).toString(), "-");
            String per = tgal[0] + "." + Integer.parseInt(tgal[1]);
            if (cboRetur.getSelectedIndex() == 0) {
                int x = JOptionPane.showConfirmDialog(this, "Apakah Data Akan Dihapus?", "", JOptionPane.YES_NO_OPTION);
                if (x == 0) {
                    if (cekperiodeAda(per)) {
                        if (cekperiode(per)) {
                            String aksilog = "Delete";
                            returDao.deleteFromRETUR(c, id);
                            prosesUpdateLog(aksilog, "jual");
                        } else {
                            JOptionPane.showMessageDialog(null, "Transaksi Untuk Periode Ini Sudah Di Tutup.. !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Transaksi Untuk Periode Ini Belum Dibuka.. !");
                    }
                }

            } else if (cboRetur.getSelectedIndex() == 1) {
                int x = JOptionPane.showConfirmDialog(this, "Apakah Data Akan Dihapus?", "", JOptionPane.YES_NO_OPTION);
                if (x == 0) {
                    if (cekperiodeAda(per)) {
                        if (cekperiode(per)) {
                            String aksilog = "Delete";
                            returbeliDao.deleteFromRETURBELI(c, id);
                            prosesUpdateLog(aksilog, "beli");
                        } else {
                            JOptionPane.showMessageDialog(null, "Transaksi Untuk Periode Ini Sudah Di Tutup.. !");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Transaksi Untuk Periode Ini Belum Dibuka.. !");
                    }
                }

            }
            c.commit();
            reloaddata(c, cboRetur.getSelectedIndex());
            JOptionPane.showMessageDialog(this, "Delete Retur Ok");

        } catch (Exception ex) {
            try {
                c.rollback();
                JOptionPane.showMessageDialog(this, "Rollback  :" + ex.getMessage());
            } catch (SQLException ex1) {
                Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } finally {
            if (c != null) {
                try {
                    c.createStatement().execute("set autocommit false");
                    c.close();
                } catch (SQLException ex) {
                    Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }//GEN-LAST:event_btnDeleteValidasiActionPerformed

    private void cboReturActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboReturActionPerformed
        // TODO add your handling code here:
        pilih(cboRetur.getSelectedIndex());
    }//GEN-LAST:event_cboReturActionPerformed

    private void btnValidasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidasiActionPerformed
        Connection c = null;
        int x = JOptionPane.showConfirmDialog(this, "Apakah Data akan Disimpan?", "", JOptionPane.YES_NO_OPTION);
        if (x == 0) {
            try {
                // TODO add your handling code here:
                c = koneksi.getKoneksiJ();
                c.createStatement().execute("set autocommit false");
                if (cboRetur.getSelectedIndex() == 1) {
                    totalhutang = hutangDao.getJumlahHutangBeli(c, tabelData.getValueAt(tabelData.getSelectedRow(), 7).toString());
                    total = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 8).toString());
                    diskont = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 9).toString());
                    tppn = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 10).toString());
                    ttotalbayar = total - diskont + tppn;
                    returbeli rb = returbeliDao.getReturBeli(c, Integer.parseInt(tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString()));
                    if (rb.getSTATUS() == 1) {
                        JOptionPane.showMessageDialog(this, "Retur Pembelian Ini Sudah di Release");
                    } else if (rb.getSTATUS() == 2) {
                        JOptionPane.showMessageDialog(this, "Retur Pembelian Ini di Batalkan");
                    } else {
                        insertJurnalReturBeli(c, rb);
                        insertRinciJurnalReturBeli(c, rb);
                        rb.setSTATUS(1);
                        returbeliDao.updateRETURBELI(c, rb);
                        String aksilog = "Validasi";
                        prosesUpdateLog(aksilog, "beli");
                        reloaddata(c, cboRetur.getSelectedIndex());
                        JOptionPane.showMessageDialog(this, "Proses Retur Pembelian Berhasil");
                    }
                } else {
                    hpp = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 10).toString());
                    totalpiutang = piutangDao.getJumlahHutangJual(c, tabelData.getValueAt(tabelData.getSelectedRow(), 6).toString());
                    total = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 7).toString());
                    diskont = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 8).toString());
                    tppn = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 9).toString());
                    ttotalbayar = total - diskont + tppn;
                    retur rj = returDao.getRetur(c, Integer.parseInt(tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString()));

                    if (rj.getSTATUS() == 1) {
                        JOptionPane.showMessageDialog(this, "Retur Penjualan Ini Sudah di Release");
                    } else if (rj.getSTATUS() == 2) {
                        JOptionPane.showMessageDialog(this, "Retur Penjualan Ini di Batalkan");
                    } else {
                        insertJurnalReturJual(c, rj);
                        insertRinciJurnalReturJual(c, rj);
                        rj.setSTATUS(1);
                        returDao.updateRETUR(c, rj);
                        String aksilog = "Validasi";
                        prosesUpdateLog(aksilog, "jual");
                        reloaddata(c, cboRetur.getSelectedIndex());
                        JOptionPane.showMessageDialog(this, "Proses Retur Penjualan Berhasil");
                    }
                }
                c.commit();
            } catch (SQLException ex) {
                try {
                    c.rollback();
                } catch (SQLException ex1) {
                    Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex1);
                }
                JOptionPane.showMessageDialog(this, "Rollback :" + ex.getMessage());
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                if (c != null) {
                    try {
                        c.createStatement().execute("set autocommit true");
                        c.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }

    }//GEN-LAST:event_btnValidasiActionPerformed

    private void tabelDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelDataMouseClicked
        try {
            // TODO add your handling code here:
            Connection c = koneksi.getKoneksiJ();
            reloaddataRinci(c, cboRetur.getSelectedIndex());
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tabelDataMouseClicked

    private void btnBatalReturActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatalReturActionPerformed
        // TODO add your handling code here:
        Connection c = null;
        int x = JOptionPane.showConfirmDialog(this, "Apakah Data Retur Ini Akan di Batalkan?", "", JOptionPane.YES_NO_OPTION);
        if (x == 0) {
            try {
                // TODO add your handling code here:
                c = koneksi.getKoneksiJ();
                c.createStatement().execute("set autocommit false");
                if (cboRetur.getSelectedIndex() == 1) {
                    //                    totalhutang = hutangDao.getJumlahHutangBeli(c, tabelData.getValueAt(tabelData.getSelectedRow(), 7).toString());
                    //                    total = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 8).toString());
                    //                    diskont = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 9).toString());
                    //                    tppn = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 10).toString());
                    //                    ttotalbayar = total - diskont + tppn;
                    returbeli rb = returbeliDao.getReturBeli(c, Integer.parseInt(tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString()));
                    //                    double totalreturpersediaan = returbelirinciDao.getreturbelirinciPersediaan(c, rb.getID());

                    //                    insertJurnalReturBeli(c, rb);
                    //                    insertRinciJurnalReturBeli(c, rb, totalreturpersediaan);
                    if (rb.getSTATUS() == 1) {
                        JOptionPane.showMessageDialog(this, "Retur Pembelian Ini Sudah di Release");
                    } else if (rb.getSTATUS() == 2) {
                        JOptionPane.showMessageDialog(this, "Retur Pembelian Ini di Batalkan");
                    } else {
                        rb.setSTATUS(2);
                        returbeliDao.updateRETURBELI(c, rb);
                        String aksilog = "Batal";
                        prosesUpdateLog(aksilog, "beli");
                        reloaddata(c, cboRetur.getSelectedIndex());
                        JOptionPane.showMessageDialog(this, "Proses Pembatalan Retur Pembelian Berhasil");
                    }

                } else {
                    //                    hpp = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 10).toString());
                    //                    totalpiutang = piutangDao.getJumlahHutangJual(c, tabelData.getValueAt(tabelData.getSelectedRow(), 6).toString());
                    //                    total = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 7).toString());
                    //                    diskont = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 8).toString());
                    //                    tppn = Double.parseDouble(tabelData.getValueAt(tabelData.getSelectedRow(), 9).toString());
                    //                    ttotalbayar = total - diskont + tppn;
                    retur rj = returDao.getRetur(c, Integer.parseInt(tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString()));
                    //                    insertJurnalReturJual(c, rj);
                    //                    insertRinciJurnalReturJual(c, rj);
                    if (rj.getSTATUS() == 1) {
                        JOptionPane.showMessageDialog(this, "Retur Pembelian Ini Sudah di Release");
                    } else if (rj.getSTATUS() == 2) {
                        JOptionPane.showMessageDialog(this, "Retur Pembelian Ini di Batalkan");
                    } else {
                        rj.setSTATUS(2);
                        returDao.updateRETUR(c, rj);
                        String aksilog = "Batal";
                        prosesUpdateLog(aksilog, "jual");
                        reloaddata(c, cboRetur.getSelectedIndex());
                        JOptionPane.showMessageDialog(this, "Proses Pembatalan Retur Penjualan Berhasil");
                    }
                }
                c.commit();
            } catch (SQLException ex) {
                try {
                    c.rollback();
                } catch (SQLException ex1) {
                    Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex1);
                }
                JOptionPane.showMessageDialog(this, "Rollback :" + ex.getMessage());
            } finally {
                if (c != null) {
                    try {
                        c.createStatement().execute("set autocommit true");
                        c.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnBatalReturActionPerformed

    private void setLayar() {
        jPanel2.setSize(dim.width - 40, 40);
        //jScrollPane1.setLocation(jPanel2.getX(), jPanel2.getY() + jPanel2.getHeight() + 10);
        jScrollPane1.setSize(dim.width - 40, dim.height / 2 - 200);
        jScrollPane2.setLocation(10, dim.height / 2 - 120);
        jScrollPane2.setSize(dim.width - 40, dim.height / 2 - 100);

    }

    void prosesUpdateLog(String aksilog, String jretur) {
        loghistory lh = new loghistory();
        loghistoryDao lhdao = new loghistoryDao();
        com.erv.function.Util u = new com.erv.function.Util();
        //java.sql.Date tanggallog;
        String tanggallog;
        String jamlog = u.jamsekarang + ":" + u.menitsekarang + ":" + u.detiksekarang;
        //tanggallog = java.sql.Date.valueOf(u.thnsekarang + "-" + u.blnsekarang + "-" + u.tglsekarang);
        tanggallog = u.thnsekarang + "-" + u.blnsekarang + "-" + u.tglsekarang;
        try {
            String ketlog = "";
            lh.setUSERIDENTITY(JavarieSoftApp.jenisuser);
            lh.setTANGGAL(tanggallog);
            lh.setJAM(jamlog);
            if (jretur.equals("jual")) {
                lh.setTABEL("TRETURJUAL");
            } else {
                lh.setTABEL("TRETURBELI");
            }
            lh.setNOREFF(tabelData.getValueAt(tabelData.getSelectedRow(), 1).toString());
            lh.setAKSI(aksilog);
            if (aksilog.equals("Validasi")) {
                if (jretur.equals("jual")) {
                    ketlog = "Validasi Data Retur Jual No Retur " + tabelData.getValueAt(tabelData.getSelectedRow(), 1).toString() + " (" + tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString() + ") Pelanggan " + tabelData.getValueAt(tabelData.getSelectedRow(), 3).toString();
                } else {
                    ketlog = "Validasi Data Retur Beli No Retur " + tabelData.getValueAt(tabelData.getSelectedRow(), 1).toString() + " (" + tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString() + ") Suplier " + tabelData.getValueAt(tabelData.getSelectedRow(), 3).toString();
                }                
            } else if (aksilog.equals("Batal")) {
                if (jretur.equals("jual")) {
                    ketlog = "Pembatalan Data Retur Jual No Retur " + tabelData.getValueAt(tabelData.getSelectedRow(), 1).toString() + " (" + tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString() + ") Pelanggan " + tabelData.getValueAt(tabelData.getSelectedRow(), 3).toString();
                } else {
                    ketlog = "Pembatalan Data Retur Beli No Retur " + tabelData.getValueAt(tabelData.getSelectedRow(), 1).toString() + " (" + tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString() + ") Suplier " + tabelData.getValueAt(tabelData.getSelectedRow(), 3).toString();
                } 
            } else if (aksilog.equals("Delete")) {
                if (jretur.equals("jual")) {
                    ketlog = "Delete Data Retur Jual No Retur " + tabelData.getValueAt(tabelData.getSelectedRow(), 1).toString() + " (" + tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString() + ") Pelanggan " + tabelData.getValueAt(tabelData.getSelectedRow(), 3).toString();
                } else {
                    ketlog = "Delete Data Retur Beli No Retur " + tabelData.getValueAt(tabelData.getSelectedRow(), 1).toString() + " (" + tabelData.getValueAt(tabelData.getSelectedRow(), 0).toString() + ") Suplier " + tabelData.getValueAt(tabelData.getSelectedRow(), 3).toString();
                }
            }
            lh.setKETERANGAN(ketlog);
            lhdao.insert(koneksi.getKoneksiJ(), lh);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.toString());
        }

    }

    public boolean cekperiodeAda(String bul) throws SQLException, ClassNotFoundException {
        //String periode = thn + "." + bln;
        boolean ada = false;
        Statement s = koneksi.getKoneksiJ().createStatement();
        ResultSet rs = s.executeQuery("select * from KONTROLPERIODE where PERIODE='" + bul + "'");
        if (rs.next()) {
            if (rs.getString(1) != null) {
                ada = true;
            }
        }
        rs.close();
        s.close();
        return ada;
    }

    public boolean cekperiode(String periode) throws SQLException, ClassNotFoundException {
        //String periode = thn + "." + bln;
        boolean hasil1 = false;
        Statement s = koneksi.getKoneksiJ().createStatement();
        ResultSet rs = s.executeQuery("select * from KONTROLPERIODE where PERIODE='" + periode + "' and STATUSSTOK='1'");

        if (rs.next()) {
            if (rs.getString(1) != null) {
                hasil1 = true;
            }
        }
        rs.close();
        s.close();
        return hasil1;
    }

    @SuppressWarnings("empty-statement")
    public void reloaddata(Connection c, int pil) {
        JDBCAdapter j = new JDBCAdapter(c);
        if (pil == 0) {
            String sql = "select RETUR.ID, " //1
                    + "KODERETUR, " //2
                    + "RETUR.TANGGAL, " //3
                    + "PELANGGAN.NAMA, " //4
                    + "KETERANGAN, " //5
                    + "FAKTUR, " //6
                    + "RETUR.IDPENJUALAN,  " //7
                    + "RETUR.TOTALRETUR, "//8
                    + "RETUR.TOTALDISKON, "//9
                    + "RETUR.TOTALPPN, "//10
                    + "RETUR.TOTALHPP, "//11
                    + "case RETUR.STATUS "
                    + "when 0 then 'Draft' "
                    + "when 1 then 'Release' "
                    + "when 2 then 'Batal' end as STATUS " //12
                    + "from RETUR inner join PELANGGAN on RETUR.KODEPELANGGAN = PELANGGAN.KODEPELANGGAN\n"
                    + "inner join PENJUALAN on RETUR.KODEPELANGGAN = PENJUALAN.ID \n"
                    + "where 1=1";
            if (cboKriteria.getSelectedIndex() == 1) {
                sql += " and lower(PELANGGAN.NAMA)  like '" + txtKriteria.getText().toLowerCase() + "%'";
            } else if (cboKriteria.getSelectedIndex() == 0) {
                sql += " and RETUR.TANGGAL='" + tanggal.getText() + "'";
            } else if (cboKriteria.getSelectedIndex() == 2) {
                sql += " and KODERETUR like '" + txtKriteria.getText() + "%'";
            }
            j.executeQuery(sql);
        } else if (pil == 1) {
            String sql = "select RETURBELI.ID, " //1
                    + "KODERETURBELI, " //2
                    + "RETURBELI.TANGGAL, " //3
                    + "SUPPLIER.NAMA, " //4
                    + "KETERANGAN, " //5
                    + "NOFAKTUR, " //6
                    + "RETURBELI.IDSUPPLIER, " //7
                    + "RETURBELI.IDPEMBELIAN,  " //8
                    + "RETURBELI.TOTALRETUR, "//9
                    + "RETURBELI.TOTALDISKON, "//10
                    + "RETURBELI.TOTALPPN, "//11
                    + "case RETURBELI.STATUS "
                    + "when 0 then 'Draft' "
                    + "when 1 then 'Release' "
                    + "when 2 then 'Batal' end as STATUS " //12
                    + "from RETURBELI inner join SUPPLIER on RETURBELI.IDSUPPLIER = SUPPLIER.IDSUPPLIER\n"
                    + "inner join PEMBELIAN on RETURBELI.IDPEMBELIAN = PEMBELIAN.ID \n"
                    + "where 1=1";
            if (cboKriteria.getSelectedIndex() == 1) {
                sql += " and lower(SUPPLIER.NAMA)  like '%" + txtKriteria.getText().toLowerCase() + "%'";
            } else if (cboKriteria.getSelectedIndex() == 0) {
                sql += " and RETURBELI.TANGGAL='" + tanggal.getText() + "'";
            } else if (cboKriteria.getSelectedIndex() == 2) {
                sql += " and KODERETURBELI like '%" + txtKriteria.getText() + "%'";
            }
            j.executeQuery(sql);

        }

        jScrollPane1.getViewport().remove(tabelData);
        tabelData = new JTable(j);
        tabelData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelDataMouseClicked(evt);
            }
        });
        tabelData.getSelectionModel().addListSelectionListener(this);
        //tabelData.getColumnModel().getColumn(4).setCellRenderer(new DecimalFormatRenderer());
        tabelData.setFont(new Font("Tahoma", Font.BOLD, 12));
        tabelData.setRowHeight(20);
        TableColumn col = tabelData.getColumnModel().getColumn(4);
        col.setPreferredWidth(350);
        col = tabelData.getColumnModel().getColumn(3);
        col.setPreferredWidth(250);
        col = tabelData.getColumnModel().getColumn(0);
        col.setPreferredWidth(15);
        col = tabelData.getColumnModel().getColumn(6);
        col.setPreferredWidth(20);
        tabelData.getColumnModel().getColumn(7).setCellRenderer(new DecimalFormatRenderer());
        tabelData.getColumnModel().getColumn(8).setCellRenderer(new DecimalFormatRenderer());
        tabelData.getColumnModel().getColumn(9).setCellRenderer(new DecimalFormatRenderer());
        tabelData.getColumnModel().getColumn(10).setCellRenderer(new DecimalFormatRenderer());
        jScrollPane1.getViewport().add(tabelData);
        jScrollPane1.repaint();
    }

    public void reloaddataRinci(Connection c, int pil) {
        JDBCAdapter a = new JDBCAdapter(c);
        if (pil == 0) {
            String sql = "SELECT * "
                    + "FROM RETURRINCI "
                    + "WHERE IDRETUR=" + tabelData.getValueAt(tabelData.getSelectedRow(), 0) + "";
            a.executeQuery(sql);
        } else if (pil == 1) {
            String sql = "SELECT * FROM RETURBELIRINCI "
                    + "WHERE IDRETURBELI =" + tabelData.getValueAt(tabelData.getSelectedRow(), 0) + "";
            a.executeQuery(sql);
        }

        jScrollPane2.getViewport().remove(dataRinci);
        dataRinci = new JTable(a);
        //tabelData.getColumnModel().getColumn(4).setCellRenderer(new DecimalFormatRenderer());
        dataRinci.setFont(new Font("Tahoma", Font.BOLD, 16));
        dataRinci.setRowHeight(20);
        jScrollPane2.getViewport().add(dataRinci);
        jScrollPane2.repaint();
    }

    void pilihKriteria(int pil) {
        if (pil == 0) {
            tanggal.setVisible(true);
            txtKriteria.setVisible(false);
        } else if (pil == 1) {
            tanggal.setVisible(false);
            txtKriteria.setVisible(true);
        } else if (pil == 2) {
            tanggal.setVisible(false);
            txtKriteria.setVisible(true);
        }
    }

    void pilih(int pil) {
        if (pil == 0) {
            cboKriteria.removeAllItems();
            cboKriteria.addItem("Tanggal");
            cboKriteria.addItem("Pelanggan");
            cboKriteria.addItem("Kode Retur");
        } else if (pil == 1) {
            cboKriteria.removeAllItems();
            cboKriteria.addItem("Tanggal");
            cboKriteria.addItem("Supplier");
            cboKriteria.addItem("Kode Retur");
        }
    }

    void insertJurnalReturBeli(Connection c, returbeli rb) throws SQLException {
        stok st = new stok();
        for (int i = 0; i < dataRinci.getRowCount(); i++) {
            st.setIDPENJUALAN(rb.getID());
            st.setKODEBARANG(dataRinci.getValueAt(i, 2).toString());
            st.setTANGGAL(rb.getTANGGAL());
            st.setIN(0);
            st.setKODETRANS("K");
            st.setKODEBATCH(dataRinci.getValueAt(i, 8).toString());
            st.setOUT(Integer.parseInt(dataRinci.getValueAt(i, 7).toString()));
            stokDao.insertIntoSTOK(c, st);
        }
        jurnal j = new jurnal();
        IDJurnal = jurnalDao.getIDJurnal(c);
        j.setID(IDJurnal);
        j.setTANGGAL(rb.getTANGGAL());
        j.setKODEJURNAL(rb.getKODERETURBELI());
        j.setDESKRIPSI("Pengembalian Barang Ke " + supplierDao.getDetails(c, rb.getIDSUPPLIER()).getNAMA());
        jurnalDao.insertIntoJURNAL(c, j);

    }

    void insertRinciJurnalReturBeli(Connection c, returbeli rb) throws SQLException, ClassNotFoundException {
        Statement s;
        s = c.createStatement();
        hutangbayar hb = new hutangbayar();

        if (totalhutang >= ttotalbayar) {
            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PERSEDIAAN") + "',0," + (total - diskont) + ",1,'')");
            if (tppn != 0) {
                s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PPNBELI") + "',0," + tppn + ",3,'')");
            }
            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + supplierDao.getDetails(c, rb.getIDSUPPLIER()).getKODEAKUN() + "'," + ttotalbayar + ",0,4,'')");
            hb.setID(hutangbayarDao.getID(c));
            hb.setIDHUTANG(hutangDao.getDetailsBeli(c, rb.getIDPEMBELIAN()).getID());
            hb.setKODEHUTANGBAYAR(hutangbayarDao.getKodeHutangBayar(c));
            hb.setTANGGAL(rb.getTANGGAL());
            hb.setJUMLAH(ttotalbayar);
            hb.setREF(rb.getKODERETURBELI());
            hutangbayarDao.insertIntoHUTANGBAYAR(c, hb);
        } else {
//            DialogHutang h = new DialogHutang(null, true, String.valueOf(IDBELI));
//            DialogHutang.txtJumlahBayar.setValue(ttotalbayar);
//            DialogHutang.ref = txtkodeRetur.getText();
//            h.setVisible(true);//            DialogHutang h = new DialogHutang(null, true, String.valueOf(IDBELI));
//            if (status) {
//                s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PERSEDIAAN") + "',0," + (hpp - PPNItem) + ",1)");
//                s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PPNBELI") + "',0," + PPNItem + ",1)");
//                s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + supplierDao.getDetails(c, kodeSupplier.getText()).getKODEAKUN() + "'," + ttotalbayar + ",0,3)");
//            } else {
//                pesan = "[Hutang]";
//            }
            int idhutang = 0;
            double sisahutang = 0;
            boolean cekstat = false;
            Statement shutang = null;
            Statement shutangtot = null;
            String sqlhutang = "select ID,IDSUPPLIER ,JUMLAH-JUMLAHBAYAR as sisa "
                    + "from VIEW_HUTANG where IDSUPPLIER='" + rb.getIDSUPPLIER() + "'";
            shutang = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rshutang = shutang.executeQuery(sqlhutang);
            if (rshutang.next()) {
                cekstat = true;
            }
            if (cekstat) {
                String sqlhutangtot = "select sum(JUMLAH-JUMLAHBAYAR) as tothutang "
                        + "from VIEW_HUTANG where IDSUPPLIER='" + rb.getIDSUPPLIER() + "'";
                shutangtot = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                ResultSet rshutangtot = shutangtot.executeQuery(sqlhutangtot);
                double sisakashutang = 0;
                rshutangtot.next();
                sisakashutang = ttotalbayar - rshutangtot.getDouble(1);

                s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PERSEDIAAN") + "',0," + (total - diskont) + ",1,'')");
                if (tppn != 0) {
                    s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PPNBELI") + "',0," + tppn + ",2,'')");
                }
//                if (ttotalbayar > rshutangtot.getDouble(1)) {
//                    s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + supplierDao.getDetails(c, kodeSupplier.getText()).getKODEAKUN() + "'," + (rshutangtot.getDouble(1) - diskont + tppn) + ",0,4,'')");
//                } else {
                s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + supplierDao.getDetails(c, rb.getIDSUPPLIER()).getKODEAKUN() + "'," + ttotalbayar + ",0,3,'')");
//                }
                rshutang.beforeFirst();
                while (ttotalbayar > 0) {
                    if (rshutang.next()) {
                        if (rshutang.getDouble(3) != 0) {
                            hb.setID(hutangbayarDao.getID(c));
                            hb.setIDHUTANG(rshutang.getInt(1));
                            hb.setKODEHUTANGBAYAR(hutangbayarDao.getKodeHutangBayar(c));
                            if (ttotalbayar >= rshutang.getDouble(3)) {
                                hb.setJUMLAH(rshutang.getDouble(3));
                                hutang htg = hutangDao.getDetails(c, rshutang.getInt(1));
                                htg.setSTATUS("0");
                                hutangDao.updateHUTANG(c, rshutang.getInt(1), htg);
                            } else {
                                hb.setJUMLAH(ttotalbayar);
                            }
                            hb.setTANGGAL(rb.getTANGGAL());
                            hb.setREF(rb.getKODERETURBELI());
                            hutangbayarDao.insertIntoHUTANGBAYAR(c, hb);
                            ttotalbayar = ttotalbayar - rshutang.getDouble(3);
                        }
                        //System.out.println("error"+rspiutang.getDouble(3));
                    } else {
//                        s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PERSEDIAAN") + "'," + sisakashutang + ",0,1,'')");
//                        s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "KAS") + "',0," + sisakashutang + ",2,'')");
//                        JOptionPane.showMessageDialog(this, "Kembali Uang Sebanyak "+ Util.toMoney(sisakashutang)); 
                        ttotalbayar = 0;
                    }
                }
                rshutangtot.close();
            } else {
                s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PERSEDIAAN") + "',0," + (total - diskont) + ",1,'')");
                if (tppn != 0) {
                    s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PPNBELI") + "',0," + tppn + ",2,'')");
                }
                s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + supplierDao.getDetails(c, rb.getIDSUPPLIER()).getKODEAKUN() + "'," + ttotalbayar + ",0,3,'')");
            }
            rshutang.close();
        }
        s.close();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBatalRetur;
    private javax.swing.JButton btnDeleteValidasi;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnValidasi;
    private javax.swing.JComboBox cboKriteria;
    private javax.swing.JComboBox cboRetur;
    private javax.swing.JTable dataRinci;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.erv.function.PanelCool panelCool1;
    private javax.swing.JTable tabelData;
    private datechooser.beans.DateChooserCombo tanggal;
    private javax.swing.JTextField txtKriteria;
    // End of variables declaration//GEN-END:variables

    public void valueChanged(ListSelectionEvent lse) {
        try {
            // TODO add your handling code here:
            Connection c = koneksi.getKoneksiJ();
            reloaddataRinci(c, cboRetur.getSelectedIndex());
            c.close();
        } catch (SQLException ex) {
            Logger.getLogger(FormRetur.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void insertJurnalReturJual(Connection c, retur rj) throws SQLException {
        stok st = new stok();
        for (int i = 0; i < dataRinci.getRowCount(); i++) {
            st.setIDPENJUALAN(rj.getID());
            st.setKODEBARANG(dataRinci.getValueAt(i, 2).toString());
            //st.setTANGGAL(java.sql.Date.valueOf(tglRetur.getText()));
            st.setTANGGAL(rj.getTANGGAL());
            st.setIN(Integer.parseInt(dataRinci.getValueAt(i, 10).toString()));
            st.setKODETRANS("R");
            st.setOUT(0);
            st.setKODEBATCH(dataRinci.getValueAt(i, 12).toString());
            stokDao.insertIntoSTOK(c, st);
        }
        jurnal j = new jurnal();
        IDJurnal = jurnalDao.getIDJurnal(c);
        j.setID(IDJurnal);
        //j.setTANGGAL(java.sql.Date.valueOf(tglRetur.getText()));
        j.setTANGGAL(rj.getTANGGAL());
        j.setKODEJURNAL(rj.getKODERETUR());
        j.setDESKRIPSI("Pengembalian Barang Dari " + new pelangganDao(c).getDetails(rj.getKODEPELANGGAN()).getNAMA());
        jurnalDao.insertIntoJURNAL(c, j);
    }

    void insertRinciJurnalReturJual(Connection c, retur rj) throws SQLException, ClassNotFoundException {
        Statement s;
        piutangbayar pb = new piutangbayar();
        s = c.createStatement();
        if (totalpiutang >= ttotalbayar) {
            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "RETURJUAL") + "'," + total + ",0,1,'')");
            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + new pelangganDao(c).getDetails(rj.getKODEPELANGGAN()).getKODEAKUN() + "',0," + ttotalbayar + ",2,'')");
            if (diskont > 0) {
                s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "DISKONJUAL") + "',0," + diskont + ",3,'')");
            }
            if (tppn > 0) {
                s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PPNJUAL") + "'," + tppn + ",0,4,'')");
            }
            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PERSEDIAAN") + "'," + hpp + ",0,5,'')");
            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "HPP") + "',0," + hpp + ",6,'')");
            pb.setID(piutangbayarDao.getID(c));
            pb.setIDPIUTANG(piutangDao.getDetailPiutangperJual(c, rj.getIDPENJUALAN()).getID());
            pb.setKODEPIUTANGBAYAR(piutangbayarDao.getKodePiutangBayar(c));
            pb.setJUMLAH(ttotalbayar);
            //pb.setTANGGAL(java.sql.Date.valueOf(tglRetur.getText()));
            pb.setTANGGAL(rj.getTANGGAL());
            pb.setREF(rj.getKODERETUR());
            piutangbayarDao.insertIntoPIUTANGBAYAR(c, pb);
        } else {
            int idpiutang = 0;
            double sisapiutang = 0;
            boolean cekstat = false;
            Statement spiutang = null;
            Statement spiutangtot = null;
            try {
                String sqlpiutang = "select ID,IDPELANGGAN ,JUMLAH-JUMLAHBAYAR as sisa "
                        + "from VIEW_PIUTANG where IDPELANGGAN='" + rj.getKODEPELANGGAN() + "'";
                spiutang = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                ResultSet rspiutang = spiutang.executeQuery(sqlpiutang);
                if (rspiutang.next()) {
                    cekstat = true;
                }
                if (cekstat) {

                    String sqlpiutangtot = "select sum(JUMLAH-JUMLAHBAYAR) as totpiutang "
                            + "from VIEW_PIUTANG where IDPELANGGAN='" + rj.getKODEPELANGGAN() + "'";
                    spiutangtot = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                    ResultSet rspiutangtot = spiutangtot.executeQuery(sqlpiutangtot);
                    double sisakaspiutang = 0;
                    rspiutangtot.next();
                    sisakaspiutang = ttotalbayar - rspiutangtot.getDouble(1);

                    s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "RETURJUAL") + "'," + total + ",0,1,'')");
//                    if (ttotalbayar > rspiutangtot.getDouble(1)) {
//                        s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + new pelangganDao(c).getDetails(kodepelanggan1.getText()).getKODEAKUN() + "',0," + rspiutangtot.getDouble(1) + ",2)");
//                    } else {
                    s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + new pelangganDao(c).getDetails(rj.getKODEPELANGGAN()).getKODEAKUN() + "',0," + ttotalbayar + ",2,'')");
//                    }
                    if (diskont > 0) {
                        s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "DISKONJUAL") + "',0," + diskont + ",3,'')");
                    }
                    if (tppn > 0) {
                        s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PPNJUAL") + "'," + tppn + ",0,4,'')");
                    }
                    s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PERSEDIAAN") + "'," + hpp + ",0,5,'')");
                    s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "HPP") + "',0," + hpp + ",6,'')");
                    rspiutang.beforeFirst();
                    while (ttotalbayar > 0) {
                        if (rspiutang.next()) {
                            if (rspiutang.getDouble(3) != 0) {
                                pb.setID(piutangbayarDao.getID(c));
                                //pb.setIDPIUTANG(piutangDao.getDetailPiutangperJual(c, IDjual).getID());
                                pb.setIDPIUTANG(rspiutang.getInt(1));
                                pb.setKODEPIUTANGBAYAR(piutangbayarDao.getKodePiutangBayar(c));
                                //pb.setJUMLAH(ttotalbayar);
                                if (ttotalbayar >= rspiutang.getDouble(3)) {
                                    pb.setJUMLAH(rspiutang.getDouble(3));
                                    piutang pt = piutangDao.getDetails(c, rspiutang.getInt(1));
                                    pt.setSTATUS("0");
                                    piutangDao.updatePIUTANG(c, pt);
                                } else {
                                    pb.setJUMLAH(ttotalbayar);
                                }
                                pb.setTANGGAL(rj.getTANGGAL());
                                pb.setREF(rj.getKODERETUR());
                                piutangbayarDao.insertIntoPIUTANGBAYAR(c, pb);
                                ttotalbayar = ttotalbayar - rspiutang.getDouble(3);
                            }
                            //System.out.println("error"+rspiutang.getDouble(3));
                        } else {
                            //s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "KAS") + "',0," + sisakaspiutang + ",5)");
//                            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "RETURJUAL") + "'," + total + ",0,1)");
//                            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "KAS") + "',0," + ttotalbayar + ",2)");
//                            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "DISKONJUAL") + "',0," + DiskonItem + ",3)");
//                            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PPNJUAL") + "'," + PPNItem + ",0,4)");
//                            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PERSEDIAAN") + "'," + hpp + ",0,5)");
//                            s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "HPP") + "',0," + hpp + ",6)");
                            break;
                        }

                    }
                } else {
                    s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "RETURJUAL") + "'," + total + ",0,1,'')");
                    s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + new pelangganDao(c).getDetails(rj.getKODEPELANGGAN()).getKODEAKUN() + "',0," + ttotalbayar + ",2,'')");
                    if (diskont > 0) {
                        s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "DISKONJUAL") + "',0," + diskont + ",3,'')");
                    }
                    if (tppn > 0) {
                        s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PPNJUAL") + "'," + tppn + ",0,4,'')");
                    }
                    s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "PERSEDIAAN") + "'," + hpp + ",0,5,'')");
                    s.execute("insert into RINCIJURNAL values(" + IDJurnal + ",'" + settingDao.getAkun(c, "HPP") + "',0," + hpp + ",6,'')");

                }
            } catch (Exception e) {
                System.out.println("errr" + e);
            }

        }
        s.close();
        pb = null;

    }

    private void settingtombol(boolean val, boolean batal, boolean hapus) {
        btnValidasi.setEnabled(val);
        btnBatalRetur.setEnabled(batal);
        btnDeleteValidasi.setEnabled(hapus);
    }

    void cektombol() {
        if (JavarieSoftApp.groupuser.equals("Penjualan")) {
            btnValidasi.setVisible(false);
            btnDeleteValidasi.setVisible(false);
            btnBatalRetur.setVisible(false);
        } else if (JavarieSoftApp.groupuser.equals("KaGudang")) {
            btnValidasi.setVisible(false);
            btnDeleteValidasi.setVisible(false);
            btnBatalRetur.setVisible(false);
        } else if (JavarieSoftApp.groupuser.equals("Administrator")) {
            btnValidasi.setVisible(true);
            btnDeleteValidasi.setVisible(true);
            btnBatalRetur.setVisible(true);
        } else if (JavarieSoftApp.groupuser.equals("Operator")) {
            btnValidasi.setVisible(false);
            btnDeleteValidasi.setVisible(false);
            btnBatalRetur.setVisible(false);
        } else if (JavarieSoftApp.groupuser.equals("Asisten Administrator")) {
            btnValidasi.setVisible(true);
            btnDeleteValidasi.setVisible(false);
            btnBatalRetur.setVisible(false);
        }
    }

}
