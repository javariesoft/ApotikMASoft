/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/*
 * FormJurnal.java
 *
 * Created on Nov 19, 2011, 11:41:25 AM
 */
package javariesoft;

import com.erv.db.hutangDao;
import com.erv.db.hutangbayarDao;
import com.erv.db.jurnalDao;
import com.erv.db.koneksi;
import com.erv.db.piutangDao;
import com.erv.db.piutangbayarDao;
import com.erv.db.rincijurnalDao;
import com.erv.db.settingDao;
import com.erv.function.JDBCAdapter;
import com.erv.function.Util;
import com.erv.fungsi.DecimalFormatRenderer;
import com.erv.model.hutang;
import com.erv.model.hutangbayar;
import com.erv.model.jurnal;
import com.erv.model.piutang;
import com.erv.model.piutangbayar;
import com.erv.model.rincijurnal;
import java.awt.Font;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import com.eigher.db.loghistoryDao;
import com.eigher.model.loghistory;
import com.erv.db.KontrolTanggalDao;
import java.awt.HeadlessException;
import java.text.DecimalFormat;

/**
 *
 * @author erwadi
 */
public class FormJurnal extends javax.swing.JInternalFrame {

    int IDJurnal = 0;
    String akunBank[];
    String kodeakun[];
    String namaAkun[];
    java.text.DateFormat d = new SimpleDateFormat("yyyy-MM-dd");
    Connection c;
    Connection cm;
    jurnal j;
    rincijurnal r;
    jurnalDao dbjurnal;
    rincijurnalDao dbrincijurnal;
    Statement stat = null;
    loghistory lh;
    loghistoryDao lhdao;
    com.erv.function.Util u = new com.erv.function.Util();
    String aksilog = "";
    double Tdebet, Tkredit = 0.0;

    /**
     * Creates new form FormJurnal
     */
    public FormJurnal() {
        initComponents();
        try {
            c = koneksi.getKoneksiJ();
            cm = koneksi.getKoneksiM();
            j = new jurnal();
            r = new rincijurnal();
            dbjurnal = new jurnalDao();
            dbrincijurnal = new rincijurnalDao();
            stat = cm.createStatement();
            lh = new loghistory();
            lhdao = new loghistoryDao();
            buatTabel();
        } catch (SQLException ex) {
            Logger.getLogger(FormJurnal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FormJurnal.class.getName()).log(Level.SEVERE, null, ex);
        }
        setTanggal();
        kosong();
        kosongAkun();
        isiCombo();
        isiComboBank();
        setKodeJurnal();
        cektombol();
        tanggal.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelCool1 = new com.erv.function.PanelCool();
        jLabel1 = new javax.swing.JLabel();
        idjurnal = new javax.swing.JTextField();
        tanggal = new datechooser.beans.DateChooserCombo();
        jLabel3 = new javax.swing.JLabel();
        deskripsi = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        cboAkun = new javax.swing.JComboBox();
        btnInsert = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnSimpanJurnal = new javax.swing.JButton();
        cboDK = new javax.swing.JComboBox();
        txtBiaya = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        rbKasMasuk = new javax.swing.JRadioButton();
        rbKasKeluar = new javax.swing.JRadioButton();
        rbBankMasuk = new javax.swing.JRadioButton();
        rbBankKeluar = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cboGrup = new javax.swing.JComboBox();
        cboBank = new javax.swing.JComboBox();
        btnBaru = new javax.swing.JButton();
        txtDebet = new javax.swing.JFormattedTextField();
        txtKredit = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        txtSelisih = new javax.swing.JFormattedTextField();
        btnDeleteJurnal = new javax.swing.JButton();
        txtKodeAkun = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();

        setClosable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(javariesoft.JavarieSoftApp.class).getContext().getResourceMap(FormJurnal.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        panelCool1.setName("panelCool1"); // NOI18N
        panelCool1.setLayout(null);

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setForeground(resourceMap.getColor("jLabel1.foreground")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        panelCool1.add(jLabel1);
        jLabel1.setBounds(20, 50, 110, 15);

        idjurnal.setEditable(false);
        idjurnal.setFont(resourceMap.getFont("idjurnal.font")); // NOI18N
        idjurnal.setText(resourceMap.getString("idjurnal.text")); // NOI18N
        idjurnal.setName("idjurnal"); // NOI18N
        panelCool1.add(idjurnal);
        idjurnal.setBounds(140, 50, 210, 21);

        tanggal.setFieldFont(resourceMap.getFont("tanggal.dch_combo_fieldFont")); // NOI18N
        panelCool1.add(tanggal);
        tanggal.setBounds(140, 80, 155, 20);

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setForeground(resourceMap.getColor("jLabel3.foreground")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        panelCool1.add(jLabel3);
        jLabel3.setBounds(20, 80, 110, 16);

        deskripsi.setFont(resourceMap.getFont("deskripsi.font")); // NOI18N
        deskripsi.setText(resourceMap.getString("deskripsi.text")); // NOI18N
        deskripsi.setName("deskripsi"); // NOI18N
        panelCool1.add(deskripsi);
        deskripsi.setBounds(140, 110, 510, 21);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setName("jTable1"); // NOI18N
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        panelCool1.add(jScrollPane1);
        jScrollPane1.setBounds(20, 240, 640, 200);

        jSeparator1.setName("jSeparator1"); // NOI18N
        panelCool1.add(jSeparator1);
        jSeparator1.setBounds(20, 140, 630, 10);

        cboAkun.setFont(resourceMap.getFont("cboAkun.font")); // NOI18N
        cboAkun.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboAkun.setName("cboAkun"); // NOI18N
        panelCool1.add(cboAkun);
        cboAkun.setBounds(30, 180, 330, 21);

        btnInsert.setFont(resourceMap.getFont("btnInsert.font")); // NOI18N
        btnInsert.setIcon(resourceMap.getIcon("btnInsert.icon")); // NOI18N
        btnInsert.setText(resourceMap.getString("btnInsert.text")); // NOI18N
        btnInsert.setName("btnInsert"); // NOI18N
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });
        panelCool1.add(btnInsert);
        btnInsert.setBounds(20, 210, 90, 25);

        jButton1.setFont(resourceMap.getFont("jButton1.font")); // NOI18N
        jButton1.setIcon(resourceMap.getIcon("jButton1.icon")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        panelCool1.add(jButton1);
        jButton1.setBounds(120, 210, 100, 25);

        btnSimpanJurnal.setFont(resourceMap.getFont("btnSimpanJurnal.font")); // NOI18N
        btnSimpanJurnal.setIcon(resourceMap.getIcon("btnSimpanJurnal.icon")); // NOI18N
        btnSimpanJurnal.setText(resourceMap.getString("btnSimpanJurnal.text")); // NOI18N
        btnSimpanJurnal.setName("btnSimpanJurnal"); // NOI18N
        btnSimpanJurnal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanJurnalActionPerformed(evt);
            }
        });
        panelCool1.add(btnSimpanJurnal);
        btnSimpanJurnal.setBounds(20, 450, 150, 40);

        cboDK.setFont(resourceMap.getFont("cboDK.font")); // NOI18N
        cboDK.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Debet", "Kredit" }));
        cboDK.setName("cboDK"); // NOI18N
        panelCool1.add(cboDK);
        cboDK.setBounds(370, 180, 100, 21);

        txtBiaya.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        txtBiaya.setFont(resourceMap.getFont("txtBiaya.font")); // NOI18N
        txtBiaya.setName("txtBiaya"); // NOI18N
        panelCool1.add(txtBiaya);
        txtBiaya.setBounds(480, 180, 170, 21);

        jLabel4.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
        jLabel4.setForeground(resourceMap.getColor("jLabel4.foreground")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        panelCool1.add(jLabel4);
        jLabel4.setBounds(20, 20, 110, 14);

        rbKasMasuk.setFont(resourceMap.getFont("rbKasMasuk.font")); // NOI18N
        rbKasMasuk.setText(resourceMap.getString("rbKasMasuk.text")); // NOI18N
        rbKasMasuk.setName("rbKasMasuk"); // NOI18N
        rbKasMasuk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbKasMasukActionPerformed(evt);
            }
        });
        panelCool1.add(rbKasMasuk);
        rbKasMasuk.setBounds(140, 20, 100, 23);

        rbKasKeluar.setFont(resourceMap.getFont("rbKasKeluar.font")); // NOI18N
        rbKasKeluar.setText(resourceMap.getString("rbKasKeluar.text")); // NOI18N
        rbKasKeluar.setName("rbKasKeluar"); // NOI18N
        rbKasKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbKasKeluarActionPerformed(evt);
            }
        });
        panelCool1.add(rbKasKeluar);
        rbKasKeluar.setBounds(250, 20, 110, 23);

        rbBankMasuk.setFont(resourceMap.getFont("rbBankMasuk.font")); // NOI18N
        rbBankMasuk.setText(resourceMap.getString("rbBankMasuk.text")); // NOI18N
        rbBankMasuk.setName("rbBankMasuk"); // NOI18N
        rbBankMasuk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBankMasukActionPerformed(evt);
            }
        });
        panelCool1.add(rbBankMasuk);
        rbBankMasuk.setBounds(370, 20, 110, 23);

        rbBankKeluar.setFont(resourceMap.getFont("rbBankKeluar.font")); // NOI18N
        rbBankKeluar.setText(resourceMap.getString("rbBankKeluar.text")); // NOI18N
        rbBankKeluar.setName("rbBankKeluar"); // NOI18N
        rbBankKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBankKeluarActionPerformed(evt);
            }
        });
        panelCool1.add(rbBankKeluar);
        rbBankKeluar.setBounds(490, 20, 100, 23);

        jLabel5.setFont(resourceMap.getFont("jLabel5.font")); // NOI18N
        jLabel5.setForeground(resourceMap.getColor("jLabel5.foreground")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        panelCool1.add(jLabel5);
        jLabel5.setBounds(420, 480, 70, 14);

        jLabel6.setFont(resourceMap.getFont("jLabel6.font")); // NOI18N
        jLabel6.setForeground(resourceMap.getColor("jLabel6.foreground")); // NOI18N
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N
        panelCool1.add(jLabel6);
        jLabel6.setBounds(20, 110, 110, 14);

        cboGrup.setFont(resourceMap.getFont("cboGrup.font")); // NOI18N
        cboGrup.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Harta", "Hutang", "Modal", "Pendapatan", "Harga Pokok Penjualan", "Biaya" }));
        cboGrup.setName("cboGrup"); // NOI18N
        cboGrup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboGrupActionPerformed(evt);
            }
        });
        panelCool1.add(cboGrup);
        cboGrup.setBounds(140, 150, 160, 21);

        cboBank.setFont(resourceMap.getFont("cboBank.font")); // NOI18N
        cboBank.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboBank.setName("cboBank"); // NOI18N
        panelCool1.add(cboBank);
        cboBank.setBounds(370, 50, 220, 21);

        btnBaru.setFont(resourceMap.getFont("btnBaru.font")); // NOI18N
        btnBaru.setIcon(resourceMap.getIcon("btnBaru.icon")); // NOI18N
        btnBaru.setText(resourceMap.getString("btnBaru.text")); // NOI18N
        btnBaru.setName("btnBaru"); // NOI18N
        btnBaru.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBaruActionPerformed(evt);
            }
        });
        panelCool1.add(btnBaru);
        btnBaru.setBounds(230, 210, 120, 25);

        txtDebet.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtDebet.setFont(resourceMap.getFont("txtDebet.font")); // NOI18N
        txtDebet.setName("txtDebet"); // NOI18N
        txtDebet.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtDebetCaretUpdate(evt);
            }
        });
        panelCool1.add(txtDebet);
        txtDebet.setBounds(330, 450, 160, 20);

        txtKredit.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtKredit.setFont(resourceMap.getFont("txtKredit.font")); // NOI18N
        txtKredit.setName("txtKredit"); // NOI18N
        txtKredit.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtKreditCaretUpdate(evt);
            }
        });
        panelCool1.add(txtKredit);
        txtKredit.setBounds(500, 450, 160, 21);

        jLabel7.setFont(resourceMap.getFont("jLabel7.font")); // NOI18N
        jLabel7.setForeground(resourceMap.getColor("jLabel7.foreground")); // NOI18N
        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N
        panelCool1.add(jLabel7);
        jLabel7.setBounds(20, 150, 110, 14);

        txtSelisih.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtSelisih.setFont(resourceMap.getFont("txtSelisih.font")); // NOI18N
        txtSelisih.setName("txtSelisih"); // NOI18N
        panelCool1.add(txtSelisih);
        txtSelisih.setBounds(500, 480, 160, 21);

        btnDeleteJurnal.setFont(resourceMap.getFont("btnDeleteJurnal.font")); // NOI18N
        btnDeleteJurnal.setIcon(resourceMap.getIcon("btnDeleteJurnal.icon")); // NOI18N
        btnDeleteJurnal.setText(resourceMap.getString("btnDeleteJurnal.text")); // NOI18N
        btnDeleteJurnal.setName("btnDeleteJurnal"); // NOI18N
        btnDeleteJurnal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteJurnalActionPerformed(evt);
            }
        });
        panelCool1.add(btnDeleteJurnal);
        btnDeleteJurnal.setBounds(180, 450, 140, 40);

        txtKodeAkun.setFont(resourceMap.getFont("txtKodeAkun.font")); // NOI18N
        txtKodeAkun.setText(resourceMap.getString("txtKodeAkun.text")); // NOI18N
        txtKodeAkun.setName("txtKodeAkun"); // NOI18N
        txtKodeAkun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKodeAkunActionPerformed(evt);
            }
        });
        panelCool1.add(txtKodeAkun);
        txtKodeAkun.setBounds(310, 150, 340, 21);

        jButton3.setFont(resourceMap.getFont("jButton3.font")); // NOI18N
        jButton3.setIcon(resourceMap.getIcon("jButton3.icon")); // NOI18N
        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        panelCool1.add(jButton3);
        jButton3.setBounds(360, 210, 120, 25);

        getContentPane().add(panelCool1, java.awt.BorderLayout.CENTER);

        setBounds(0, 0, 690, 536);
    }// </editor-fold>//GEN-END:initComponents

private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
    try {
        // TODO add your handling code here:

//        if (rbKasMasuk.isSelected()) {
//            stat.execute("insert into rinciJurnal values('" + settingDao.getAkun(c, "KAS") + "','KAS'," + txtBiaya.getValue() + ",0)");
//            stat.execute("insert into rinciJurnal values('" + kodeakun[cboAkun.getSelectedIndex()] + "','" + namaAkun[cboAkun.getSelectedIndex()] + "',0," + txtBiaya.getValue() + ")");
//        } else if (rbKasKeluar.isSelected()) {
//            stat.execute("insert into rinciJurnal values('" + kodeakun[cboAkun.getSelectedIndex()] + "','" + namaAkun[cboAkun.getSelectedIndex()] + "'," + txtBiaya.getValue() + ",0)");
//            stat.execute("insert into rinciJurnal values('" + settingDao.getAkun(c, "KAS") + "','KAS',0," + txtBiaya.getValue() + ")");
//        } else if (rbBankMasuk.isSelected()) {
//            stat.execute("insert into rinciJurnal values('" + akunBank[cboBank.getSelectedIndex()] + "','BANK'," + txtBiaya.getValue() + ",0)");
//            stat.execute("insert into rinciJurnal values('" + kodeakun[cboAkun.getSelectedIndex()] + "','" + namaAkun[cboAkun.getSelectedIndex()] + "',0," + txtBiaya.getValue() + ")");
//        } else if (rbBankKeluar.isSelected()) {
//            stat.execute("insert into rinciJurnal values('" + kodeakun[cboAkun.getSelectedIndex()] + "','" + namaAkun[cboAkun.getSelectedIndex()] + "'," + txtBiaya.getValue() + ",0)");
//            stat.execute("insert into rinciJurnal values('" + akunBank[cboBank.getSelectedIndex()] + "','BANK',0," + txtBiaya.getValue() + ")");
//        } else {
//            if (cboDK.getSelectedIndex() == 0) {
//                stat.execute("insert into rinciJurnal values('" + kodeakun[cboAkun.getSelectedIndex()] + "','" + namaAkun[cboAkun.getSelectedIndex()] + "'," + txtBiaya.getValue() + ",0)");
//            } else {
//                stat.execute("insert into rinciJurnal values('" + kodeakun[cboAkun.getSelectedIndex()] + "','" + namaAkun[cboAkun.getSelectedIndex()] + "',0," + txtBiaya.getValue() + ")");
//            }
//        }
        if (rbKasMasuk.isSelected()) {
            stat.execute("insert into rinciJurnal values('" + settingDao.getAkun(c, "KAS") + "','KAS'," + Double.parseDouble(txtBiaya.getValue().toString()) + ",0)");
            stat.execute("insert into rinciJurnal values('" + kodeakun[cboAkun.getSelectedIndex()] + "','" + namaAkun[cboAkun.getSelectedIndex()] + "',0," + Double.parseDouble(txtBiaya.getValue().toString()) + ")");
        } else if (rbKasKeluar.isSelected()) {
            stat.execute("insert into rinciJurnal values('" + kodeakun[cboAkun.getSelectedIndex()] + "','" + namaAkun[cboAkun.getSelectedIndex()] + "'," + Double.parseDouble(txtBiaya.getValue().toString()) + ",0)");
            stat.execute("insert into rinciJurnal values('" + settingDao.getAkun(c, "KAS") + "','KAS',0," + Double.parseDouble(txtBiaya.getValue().toString()) + ")");
        } else if (rbBankMasuk.isSelected()) {
            stat.execute("insert into rinciJurnal values('" + akunBank[cboBank.getSelectedIndex()] + "','BANK'," + Double.parseDouble(txtBiaya.getValue().toString()) + ",0)");
            stat.execute("insert into rinciJurnal values('" + kodeakun[cboAkun.getSelectedIndex()] + "','" + namaAkun[cboAkun.getSelectedIndex()] + "',0," + Double.parseDouble(txtBiaya.getValue().toString()) + ")");
        } else if (rbBankKeluar.isSelected()) {
            stat.execute("insert into rinciJurnal values('" + kodeakun[cboAkun.getSelectedIndex()] + "','" + namaAkun[cboAkun.getSelectedIndex()] + "'," + Double.parseDouble(txtBiaya.getValue().toString()) + ",0)");
            stat.execute("insert into rinciJurnal values('" + akunBank[cboBank.getSelectedIndex()] + "','BANK',0," + Double.parseDouble(txtBiaya.getValue().toString()) + ")");
        } else {
            if (cboDK.getSelectedIndex() == 0) {
                stat.execute("insert into rinciJurnal values('" + kodeakun[cboAkun.getSelectedIndex()] + "','" + namaAkun[cboAkun.getSelectedIndex()] + "'," + Double.parseDouble(txtBiaya.getValue().toString()) + ",0)");
            } else {
                stat.execute("insert into rinciJurnal values('" + kodeakun[cboAkun.getSelectedIndex()] + "','" + namaAkun[cboAkun.getSelectedIndex()] + "',0," + Double.parseDouble(txtBiaya.getValue().toString()) + ")");
            }
        }
        reloadData();
        cboAkun.requestFocus();

    } catch (SQLException ex) {
        reloadData();
        Logger.getLogger(FormJurnal.class.getName()).log(Level.SEVERE, null, ex);
    }

}//GEN-LAST:event_btnInsertActionPerformed

private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
// TODO add your handling code here:
}//GEN-LAST:event_jTable1MouseClicked

private void btnSimpanJurnalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanJurnalActionPerformed
// TODO add your handling code here:
    boolean cekbalance = false;
    if (Double.parseDouble(txtSelisih.getValue().toString()) != 0.00) {
        if (JavarieSoftApp.groupuser.equals("Administrator")) {
            cekbalance = true;
        } else {
            cekbalance = false;
        }
    } else {
        if (JavarieSoftApp.groupuser.equals("Administrator")) {
            cekbalance = true;
        } else {
            cekbalance = false;
        }
    }
    try {
        int x = JOptionPane.showConfirmDialog(this, "Apakah Data Disimpan?", "", JOptionPane.YES_NO_OPTION);
        if (x == 0) {
            c.createStatement().execute("set autocommit false");
//            if ((deskripsi.getText().equals("")) || (Double.parseDouble(txtSelisih.getValue().toString()) != 0.00)) {           
            if (JavarieSoftApp.groupuser.equals("Administrator")) {
                if (deskripsi.getText().equals("")) {
                    JOptionPane.showMessageDialog(null, "Data Tidak Benar.. !");
                    deskripsi.requestFocus();
//                }else if (!KontrolTanggalDao.cekHarian(c, tanggal.getText())) {
//                    JOptionPane.showMessageDialog(null, "Transaksi Tidak Bisa Dilakukan Karena :\n"
//                        + "1.Transaksi Untuk Tanggal Ini Sudah Tutup atau\n"
//                        + "2.Transaksi Untuk Tanggal Ini Belum Dibuka");
                } else {
                    String tgl[] = Util.split(tanggal.getText(), "-");
                    String per = tgl[0] + "." + Integer.parseInt(tgl[1]);
                    if (cekperiodeAda(per)) {
                        if (cekperiode(per)) {
                            aksilog = "InsertJurnal";
                            prosesInsert();
                            prosesUpdateLog();
                            kosong();
                            kosongAkun();
                            cektombol();
                            c.commit();
                        } else {
                            JOptionPane.showMessageDialog(null, "Transaksi Untuk Periode Ini Sudah Di Tutup.. !");
                            deskripsi.requestFocus();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Transaksi Untuk Periode Ini Belum Dibuka.. !");
                        deskripsi.requestFocus();
                    }
                }
            } else {
                if ((deskripsi.getText().equals("")) || (Double.parseDouble(txtSelisih.getValue().toString()) != 0.00)) {
                    JOptionPane.showMessageDialog(null, "Data Tidak Benar.. !");
                    deskripsi.requestFocus();
//                }else if (!KontrolTanggalDao.cekHarian(c, tanggal.getText())) {
//                    JOptionPane.showMessageDialog(null, "Transaksi Tidak Bisa Dilakukan Karena :\n"
//                        + "1.Transaksi Untuk Tanggal Ini Sudah Tutup atau\n"
//                        + "2.Transaksi Untuk Tanggal Ini Belum Dibuka");
                } else {
                    String tgl[] = Util.split(tanggal.getText(), "-");
                    String per = tgl[0] + "." + Integer.parseInt(tgl[1]);
                    if (cekperiodeAda(per)) {
                        if (cekperiode(per)) {
                            aksilog = "InsertJurnal";
                            prosesInsert();
                            prosesUpdateLog();
                            kosong();
                            kosongAkun();
                            cektombol();
                            c.commit();
                        } else {
                            JOptionPane.showMessageDialog(null, "Transaksi Untuk Periode Ini Sudah Di Tutup.. !");
                            deskripsi.requestFocus();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Transaksi Untuk Periode Ini Belum Dibuka.. !");
                        deskripsi.requestFocus();
                    }
                }
            }

        } else {
            deskripsi.requestFocus();
        }
    } catch (SQLException e) {
        try {
            c.rollback();
            JOptionPane.showMessageDialog(this, "Rollback :" + e.getMessage());
        } catch (SQLException ex1) {
            Logger.getLogger(FormJurnal.class.getName()).log(Level.SEVERE, null, ex1);
        }
    } finally {
//                if (c != null) {
        try {
            c.createStatement().execute("set autocommit true");
//                        c.close();
        } catch (SQLException ex) {
            Logger.getLogger(FormJurnal.class.getName()).log(Level.SEVERE, null, ex);
        }
//                }
    }
}//GEN-LAST:event_btnSimpanJurnalActionPerformed

private void rbKasMasukActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbKasMasukActionPerformed
// TODO add your handling code here:
    rbKasKeluar.setSelected(false);
    rbBankKeluar.setSelected(false);
    rbBankMasuk.setSelected(false);
    setKodeJurnal(1);
}//GEN-LAST:event_rbKasMasukActionPerformed

private void rbKasKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbKasKeluarActionPerformed
// TODO add your handling code here:
    rbKasMasuk.setSelected(false);
    rbBankKeluar.setSelected(false);
    rbBankMasuk.setSelected(false);
    setKodeJurnal(2);
}//GEN-LAST:event_rbKasKeluarActionPerformed

private void rbBankMasukActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbBankMasukActionPerformed
// TODO add your handling code here:
    rbKasMasuk.setSelected(false);
    rbKasKeluar.setSelected(false);
    rbBankKeluar.setSelected(false);
    setKodeJurnal(3);
}//GEN-LAST:event_rbBankMasukActionPerformed

private void rbBankKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbBankKeluarActionPerformed
// TODO add your handling code here:
    rbKasMasuk.setSelected(false);
    rbKasKeluar.setSelected(false);
    rbBankMasuk.setSelected(false);
    setKodeJurnal(4);
}//GEN-LAST:event_rbBankKeluarActionPerformed

private void cboGrupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboGrupActionPerformed
// TODO add your handling code here:
    isiCombo();
}//GEN-LAST:event_cboGrupActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    try {
        // TODO add your handling code here:
        stat.execute("delete from rinciJurnal where KODEAKUN='" + jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString() + "'");
        reloadData();
    } catch (SQLException ex) {
        Logger.getLogger(FormJurnal.class.getName()).log(Level.SEVERE, null, ex);
    }

}//GEN-LAST:event_jButton1ActionPerformed

private void btnBaruActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBaruActionPerformed
// TODO add your handling code here:
    kosong();
    kosongAkun();
    cektombol();
}//GEN-LAST:event_btnBaruActionPerformed

private void txtDebetCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtDebetCaretUpdate
// TODO add your handling code here:
    //txtSelisih.setValue(Double.parseDouble(txtDebet.getValue().toString()) - Double.parseDouble(txtKredit.getValue().toString()));
}//GEN-LAST:event_txtDebetCaretUpdate

private void txtKreditCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtKreditCaretUpdate
// TODO add your handling code here:
    //
}//GEN-LAST:event_txtKreditCaretUpdate

private void btnDeleteJurnalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteJurnalActionPerformed
// TODO add your handling code here:
    com.eigher.form.FormHapusJurnal p = new com.eigher.form.FormHapusJurnal();
    p.toFront();
    JavarieSoftView.panelCool1.add(p);
    p.setVisible(true);
}//GEN-LAST:event_btnDeleteJurnalActionPerformed

private void txtKodeAkunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKodeAkunActionPerformed
// TODO add your handling code here:
    isiCombo1();
}//GEN-LAST:event_txtKodeAkunActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBaru;
    private javax.swing.JButton btnDeleteJurnal;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnSimpanJurnal;
    private javax.swing.JComboBox cboAkun;
    private javax.swing.JComboBox cboBank;
    private javax.swing.JComboBox cboDK;
    private javax.swing.JComboBox cboGrup;
    private javax.swing.JTextField deskripsi;
    private javax.swing.JTextField idjurnal;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private com.erv.function.PanelCool panelCool1;
    private javax.swing.JRadioButton rbBankKeluar;
    private javax.swing.JRadioButton rbBankMasuk;
    private javax.swing.JRadioButton rbKasKeluar;
    private javax.swing.JRadioButton rbKasMasuk;
    private datechooser.beans.DateChooserCombo tanggal;
    private javax.swing.JFormattedTextField txtBiaya;
    private javax.swing.JFormattedTextField txtDebet;
    private javax.swing.JTextField txtKodeAkun;
    private javax.swing.JFormattedTextField txtKredit;
    private javax.swing.JFormattedTextField txtSelisih;
    // End of variables declaration//GEN-END:variables

    private void kosong() {
        idjurnal.setText("");
        deskripsi.setText("");
        rbBankKeluar.setSelected(false);
        rbBankMasuk.setSelected(false);
        rbKasKeluar.setSelected(false);
        rbKasMasuk.setSelected(false);
        setKodeJurnal();
    }

    private void kosongAkun() {
        try {
            stat.execute("delete from rinciJurnal");
            reloadData();
        } catch (SQLException ex) {
            Logger.getLogger(FormJurnal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void isiCombo1() {
        cboAkun.removeAllItems();
        //cboBank.removeAllItems();
        //String sql = "select * from PERKIRAAN where (TIPE='D' or TIPE='SD') and (kodeperkiraan like '%" + txtKodeAkun.getText() + "%' OR lower(NAMAPERKIRAAN) like '%" + txtKodeAkun.getText().toLowerCase() + "%') order by 2";
        //String sql = "select * from PERKIRAAN where (TIPE='SD' or kodeperkiraan ='11110' or kodeperkiraan ='31101' or kodeperkiraan='11310') and (kodeperkiraan like '%" + txtKodeAkun.getText() + "%' OR lower(NAMAPERKIRAAN) like '%" + txtKodeAkun.getText().toLowerCase() + "%') order by 2";
        String sql = "";
        if (JavarieSoftApp.groupuser.equals("Administrator")) {
            sql = "select * from PERKIRAAN where (TIPE='D' or TIPE='SD') and (kodeperkiraan like '%" + txtKodeAkun.getText() + "%' OR lower(NAMAPERKIRAAN) like '%" + txtKodeAkun.getText().toLowerCase() + "%') order by 2";
        } else {
            sql = "select * from PERKIRAAN where (TIPE='D' or TIPE='SD') \n" +
"and (kodeperkiraan not like '%11120'  /*BANK*/\n" +
"and kodeperkiraan not like '11130%'    /*UANG MUKA CAD. BP*/\n" +
"and kodeperkiraan not like '11201%'   /*pelanggan*/\n" +
"and kodeperkiraan not like '%11202'   /*PIUTANG PAJAK(D)*/\n" +
"and kodeperkiraan not like '11202.1%'   /*PPN MASUKAN(SD)*/\n" +
"and kodeperkiraan not like '11202.2%'   /*PPH Pasal 22(SD)*/\n" +
"and kodeperkiraan not like '11203%'   /*PIUTANG BANK dan Subdetail*/\n" +
"and kodeperkiraan not like '11205%'   /*PIUTANG CABANG*/\n" +
"and kodeperkiraan not like '11310%'     /*PERSEDIAAN BARANG DAGANGAN*/\n" +
"and kodeperkiraan not like '11410%'     /*BIAYA DIBAYAR DIMUKA*/\n" +
"and kodeperkiraan not like '11510%'     /*UANG MUKA PAJAK*/\n" +
"and kodeperkiraan not like '11610%'     /*UANG MUKA PEMBELIAN*/\n" +
"and kodeperkiraan not like '11710%'     /*UANG MUKA BIAYA PENJUALAN dan Subdetail*/\n" +
"and kodeperkiraan not like '%11810'    /*ASURANSI*/\n" +
"and kodeperkiraan not like '%11910'    /*PINJAMAN KARYAWAN*/\n" +
"and kodeperkiraan not like '12100%'   /*TANAH(D)(SD)*/\n" +
"and kodeperkiraan not like '12200%'   /*BANGUNAN(D)(SD)*/\n" +
"and kodeperkiraan not like '12201%'   /*AKM. PENYUSUTAN BANGUNAN(D)(SD)*/\n" +
"and kodeperkiraan not like '%12300'   /*KENDARAAN(D)*/\n" +
"and kodeperkiraan not like '12301%'   /*AKUM. PENYUSUTAN KENDARAAN(D)*/\n" +
"and kodeperkiraan not like '%12400'   /*InventarisKantor(D)*/\n" +
"and kodeperkiraan not like '12401%'   /*AKUM. PENYUSUTAN INVENTARIS KANTOR*/\n" +
"and kodeperkiraan not like '21101%'   /*Supplier*/\n" +
"and kodeperkiraan not like '%21102'   /*HUTANG EKSPEDISI(D)*/\n" +
"and kodeperkiraan not like '21103%'   /*HUTANG GIRO(D)(SD)*/\n" +
"and kodeperkiraan not like '21104%'   /*TITIPAN PIHAK KE 3(D)*/\n" +
"and kodeperkiraan not like '21105%'   /*UANG MUKA PENJUALAN(D)*/\n" +
"and kodeperkiraan not like '21111%'   /*HUTANG PAJAK(D)(SD)*/\n" +
"and kodeperkiraan not like '21201%'   /*HUTANG BANK(D)*/\n" +
"and kodeperkiraan not like '21301%'   /*HUTANG LEASING(D)*/\n" +
"and kodeperkiraan not like '21401%'   /*HUTANG PEMBELIAN INVENTARIS(D)*/\n" +
"and kodeperkiraan not like '3%'\n" +
"and kodeperkiraan not like '3%'\n" +
"and kodeperkiraan not like '41101%'   /*PENJUALAN(D)*/\n" +
"and kodeperkiraan not like '41102%'   /*DISC PENJUALAN(D)*/\n" +
"and kodeperkiraan not like '41103%'   /*RETUR PENJUALAN(D)*/\n" +
"and kodeperkiraan not like '41201%'   /*PENDAPATAN CABANG(D)*/\n" +
"and kodeperkiraan not like '41301%'   /*PENDAPATAN ONGKOS KIRIM(D)*/\n" +
"and kodeperkiraan not like '41901%'   /*ONGKOS KIRIM PENJUALAN(D)*/\n" +
"and kodeperkiraan not like '%49999'   /*PENDAPATAN LAIN_LAIN(D)*/\n" +
"and kodeperkiraan not like '5%'       /*AkunHPP*/\n" +
"and kodeperkiraan not like '%61101'  /*BIAYA ADM & UMUM*/  \n" +
"and kodeperkiraan not like '%70001') and (kodeperkiraan like '%" + txtKodeAkun.getText() + "%' OR lower(NAMAPERKIRAAN) like '%" + txtKodeAkun.getText().toLowerCase() + "%') order by 2";
        }
        try {
            Statement stat1 = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = stat1.executeQuery(sql);
            int j1 = 0;
            if (rs.last()) {
                j1 = rs.getRow();
            }
            if (j1 > 0) {
                kodeakun = new String[j1];
                namaAkun = new String[j1];
                rs.beforeFirst();
                int c1 = 0;
                while (rs.next()) {
                    cboAkun.addItem(rs.getString(1) + "-" + rs.getString(2));
                    kodeakun[c1] = rs.getString(1);
                    namaAkun[c1] = rs.getString(2);
                    c1++;
                }
            }
            rs.close();
            stat1.close();
            //System.out.print(sql);
        } catch (SQLException ex) {
            Logger.getLogger(FormJurnal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void isiCombo() {
        cboAkun.removeAllItems();
        //cboBank.removeAllItems();
        //String sql = "select * from PERKIRAAN where (TIPE='D' or TIPE='SD') and GRUP=" + (cboGrup.getSelectedIndex() + 1) + " order by 2";
//        String sql = "select * from PERKIRAAN where kodeperkiraan not like '%11201.%' and kodeperkiraan not like '%21101.%' and TIPE='SD' and GRUP=" + (cboGrup.getSelectedIndex() + 1) + " order by 2";
        String sql = "";
        if (JavarieSoftApp.groupuser.equals("Administrator")) {
            sql = "select * from PERKIRAAN where (TIPE='D' or TIPE='SD') and GRUP=" + (cboGrup.getSelectedIndex() + 1) + " order by 2";
        } else {
            sql = "select * from PERKIRAAN where (TIPE='D' or TIPE='SD') \n" +
"and (kodeperkiraan not like '%11120'  /*BANK*/\n" +
"and kodeperkiraan not like '11130%'    /*UANG MUKA CAD. BP*/\n" +
"and kodeperkiraan not like '11201%'   /*pelanggan*/\n" +
"and kodeperkiraan not like '11202%'   /*PIUTANG PAJAK dan Subdetail*/\n" +
"and kodeperkiraan not like '11203%'   /*PIUTANG BANK dan Subdetail*/\n" +
"and kodeperkiraan not like '11205%'   /*PIUTANG CABANG*/\n" +
"and kodeperkiraan not like '11310%'     /*PERSEDIAAN BARANG DAGANGAN*/\n" +
"and kodeperkiraan not like '11410%'     /*BIAYA DIBAYAR DIMUKA*/\n" +
"and kodeperkiraan not like '11510%'     /*UANG MUKA PAJAK*/\n" +
"and kodeperkiraan not like '11610%'     /*UANG MUKA PEMBELIAN*/\n" +
"and kodeperkiraan not like '11710%'     /*UANG MUKA BIAYA PENJUALAN dan Subdetail*/\n" +
"and kodeperkiraan not like '%11810'    /*ASURANSI*/\n" +
"and kodeperkiraan not like '%11910'    /*PINJAMAN KARYAWAN*/\n" +
"and kodeperkiraan not like '12100%'   /*TANAH(D)(SD)*/\n" +
"and kodeperkiraan not like '12200%'   /*BANGUNAN(D)(SD)*/\n" +
"and kodeperkiraan not like '12201%'   /*AKM. PENYUSUTAN BANGUNAN(D)(SD)*/\n" +
"and kodeperkiraan not like '%12300'   /*KENDARAAN(D)*/\n" +
"and kodeperkiraan not like '12301%'   /*AKUM. PENYUSUTAN KENDARAAN(D)*/\n" +
"and kodeperkiraan not like '%12400'   /*InventarisKantor(D)*/\n" +
"and kodeperkiraan not like '12401%'   /*AKUM. PENYUSUTAN INVENTARIS KANTOR*/\n" +
"and kodeperkiraan not like '21101%'   /*Supplier*/\n" +
"and kodeperkiraan not like '%21102'   /*HUTANG EKSPEDISI(D)*/\n" +
"and kodeperkiraan not like '21103%'   /*HUTANG GIRO(D)(SD)*/\n" +
"and kodeperkiraan not like '21104%'   /*TITIPAN PIHAK KE 3(D)*/\n" +
"and kodeperkiraan not like '21105%'   /*UANG MUKA PENJUALAN(D)*/\n" +
"and kodeperkiraan not like '21111%'   /*HUTANG PAJAK(D)(SD)*/\n" +
"and kodeperkiraan not like '21201%'   /*HUTANG BANK(D)*/\n" +
"and kodeperkiraan not like '21301%'   /*HUTANG LEASING(D)*/\n" +
"and kodeperkiraan not like '21401%'   /*HUTANG PEMBELIAN INVENTARIS(D)*/\n" +
"and kodeperkiraan not like '3%'\n" +
"and kodeperkiraan not like '3%'\n" +
"and kodeperkiraan not like '41101%'   /*PENJUALAN(D)*/\n" +
"and kodeperkiraan not like '41102%'   /*DISC PENJUALAN(D)*/\n" +
"and kodeperkiraan not like '41103%'   /*RETUR PENJUALAN(D)*/\n" +
"and kodeperkiraan not like '41201%'   /*PENDAPATAN CABANG(D)*/\n" +
"and kodeperkiraan not like '41301%'   /*PENDAPATAN ONGKOS KIRIM(D)*/\n" +
"and kodeperkiraan not like '41901%'   /*ONGKOS KIRIM PENJUALAN(D)*/\n" +
"and kodeperkiraan not like '%49999'   /*PENDAPATAN LAIN_LAIN(D)*/\n" +
"and kodeperkiraan not like '5%'       /*AkunHPP*/\n" +
"and kodeperkiraan not like '%61101'  /*BIAYA ADM & UMUM*/  \n" +
"and kodeperkiraan not like '%70001') and GRUP=" + (cboGrup.getSelectedIndex() + 1) + " order by 2";
        }
        try {
            Statement stat1 = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = stat1.executeQuery(sql);

            int j1 = 0;
            if (rs.last()) {
                j1 = rs.getRow();
            }
            if (j1 > 0) {
                kodeakun = new String[j1];
                namaAkun = new String[j1];
                rs.beforeFirst();
                int c1 = 0;
                while (rs.next()) {
                    cboAkun.addItem(rs.getString(1) + "-" + rs.getString(2));
                    kodeakun[c1] = rs.getString(1);
                    namaAkun[c1] = rs.getString(2);
                    c1++;
                }
            }
//            rs = stat.executeQuery("select * from bank order by 1");
//            j = 0;
//            if (rs.last()) {
//                j = rs.getRow();
//            }
//            if (j > 0) {
//                akunBank = new String[j];
//                rs.beforeFirst();
//                int c = 0;
//                while (rs.next()) {
//                    cboBank.addItem(rs.getString(2));
//                    akunBank[c] = rs.getString(3);
//                    c++;
//                }
//            }
            rs.close();
            stat1.close();
        } catch (SQLException ex) {
            Logger.getLogger(FormJurnal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void isiComboBank() {
        //cboAkun.removeAllItems();
        cboBank.removeAllItems();
        String sql = "select * from bank order by 1";
        try {
            Statement stat1 = c.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = stat1.executeQuery(sql);
            //ResultSet rs = stat.executeQuery("select * from bank order by 1");
            int j1 = 0;
            if (rs.last()) {
                j1 = rs.getRow();
            }
            if (j1 > 0) {
                akunBank = new String[j1];
                rs.beforeFirst();
                int c1 = 0;
                while (rs.next()) {
                    cboBank.addItem(rs.getString(2));
                    akunBank[c1] = rs.getString(3);
                    c1++;
                }
            }
            rs.close();
            stat1.close();
        } catch (SQLException ex) {
            Logger.getLogger(FormJurnal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setTanggal() {
        tanggal.setDateFormat(d);
        tanggal.setText(com.erv.function.Util.toDateStringSql(new Date()));
    }

    private void setKodeJurnal() {
        String tgl = com.erv.function.Util.toDateStringSql(new Date());
        try {
            IDJurnal = jurnalDao.getIDJurnal(c);
            idjurnal.setText(jurnalDao.getGenKodeJurnal(c, "JU"));
        } catch (SQLException ex) {
            Logger.getLogger(FormPenjualan.class.getName()).log(Level.SEVERE, null, ex);
        }
//        String tgl = com.erv.function.Util.toDateStringSql(new Date());
//        try {
//            IDJurnal = jurnalDao.getIDJurnal(c);
//            idjurnal.setText("F" + com.erv.function.Util.getbln(tgl) + com.erv.function.Util.getthn(tgl) + IDJurnal);
//        } catch (SQLException ex) {
//            Logger.getLogger(FormPenjualan.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    private void buatTabel() {
        String sqlCreate = "create table rinciJurnal (KODEAKUN varchar(20),PERKIRAAN varchar(50), "
                + "DEBET double, "
                + "KREDIT double)";
        try {
            stat.execute(sqlCreate);
        } catch (SQLException ex) {
            Logger.getLogger(FormPenjualan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void reloadData() {
        JDBCAdapter ja = new JDBCAdapter(cm);
        ja.executeQuery("select * from rinciJurnal");
        jScrollPane1.getViewport().remove(jTable1);
        jTable1 = new JTable(ja);
        jTable1.setFont(new Font("Tahoma", Font.BOLD, 12));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setFocusable(false);
        jTable1.setFocusable(false);
        jTable1.getColumnModel().getColumn(2).setCellRenderer(new DecimalFormatRenderer());
        jTable1.getColumnModel().getColumn(3).setCellRenderer(new DecimalFormatRenderer());
        jTable1.setFont(new Font("Tahoma", Font.BOLD, 11));
        jScrollPane1.getViewport().add(jTable1);
        jScrollPane1.repaint();
        try {
            ja.close();
        } catch (SQLException ex) {
            Logger.getLogger(FormJurnal.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Tdebet = 0;
            Tkredit = 0;
            ResultSet rs = stat.executeQuery("select * from rinciJurnal");
            while (rs.next()) {
                //System.out.println(rs.getString(3) + "--- "+rs.getString(4));
                Tdebet += toDesimal(rs.getDouble(3));
                Tkredit += toDesimal(rs.getDouble(4));
                txtDebet.setValue(toDesimal(Tdebet));
                txtKredit.setValue(toDesimal(Tkredit));

            }

            double selisih = toDesimal(Tdebet) - toDesimal(Tkredit);
            //double selisih = Double.parseDouble(txtDebet.getValue().toString()) - Double.parseDouble(txtKredit.getValue().toString());
            txtSelisih.setValue(selisih);
            //System.out.println(Tdebet + "--- "+toDesimal(Tkredit) +" ="+toDesimal(selisih));
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(FormJurnal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    void prosesInsert() {
        String sql = "";
        double sisa = 0, bayar = 0, hutang = 0;
        piutangbayar h = new piutangbayar();
        piutang p = new piutang();
        hutang ht = new hutang();
        hutangbayar hb = new hutangbayar();
        String a[] = null;
        try {
            j.setID(IDJurnal);
            j.setKODEJURNAL(idjurnal.getText());
            j.setTANGGAL(tanggal.getText());
            j.setDESKRIPSI(deskripsi.getText());
            if (!jurnalDao.insertIntoJURNAL(c, j)) {
                JOptionPane.showMessageDialog(this, "Entri Data Ok");
                Statement s = cm.createStatement();
                Statement s1 = c.createStatement();
                ResultSet rs1 = null;
                ResultSet rs = s.executeQuery("select * from rinciJurnal");
                int count = 1;
                while (rs.next()) {
                    if (rs.getString(1).substring(0, 5).equals(settingDao.getAkun(c, "PIUTANG"))) {
                        a = Util.split(rs.getString(1), ".");
                        if (a.length > 1) {
                            sql = "SELECT ID,KETERANGAN,(JUMLAH - JUMLAHBAYAR) as JUMLAH,JATUHTEMPO,STATUS,NOFAKTUR from VIEW_PIUTANG where IDPELANGGAN='" + a[1] + "' AND STATUS='BELUM LUNAS' order by ID";
                            rs1 = s1.executeQuery(sql);
                            bayar = rs.getDouble(4);
                            while (rs1.next()) {
                                if (rs.getDouble(4) > 0.0) { //kredit                                
                                    hutang = rs1.getDouble(3);
                                    sisa = bayar - hutang;
                                    if (sisa >= 0) {
                                        h.setID(piutangbayarDao.getID(c));
                                        h.setIDPIUTANG(Integer.parseInt(rs1.getString(1).toString()));
                                        h.setKODEPIUTANGBAYAR(piutangbayarDao.getKodePiutangBayar(c));
                                        h.setTANGGAL(tanggal.getText());
                                        h.setJUMLAH(hutang);
                                        piutangbayarDao.insertIntoPIUTANGBAYAR(c, h);
                                        p = piutangDao.getDetails(c, h.getIDPIUTANG());
                                        p.setSTATUS("0");
                                        piutangDao.updatePIUTANG(c, p);
                                        bayar = sisa;
                                    } else {
                                        h.setID(piutangbayarDao.getID(c));
                                        h.setIDPIUTANG(Integer.parseInt(rs1.getString(1).toString()));
                                        h.setKODEPIUTANGBAYAR(piutangbayarDao.getKodePiutangBayar(c));
                                        h.setTANGGAL(tanggal.getText());
                                        h.setJUMLAH(bayar);
                                        piutangbayarDao.insertIntoPIUTANGBAYAR(c, h);
                                        break;
                                    }
                                }
                            }
                            rs1.close();
                            s1.close();
                        }
                    } else if (rs.getString(1).substring(0, 5).equals(settingDao.getAkun(c, "HUTANG"))) {
                        a = Util.split(rs.getString(1), ".");
                        if (a.length > 1) {
                            sql = "SELECT ID,KETERANGAN,JUMLAH - JUMLAHBAYAR as JUMLAH,JATUHTEMPO,STATUS,NOFAKTUR from VIEW_HUTANG where IDSUPPLIER='" + a[1] + "' AND STATUS='BELUM LUNAS'";
                            rs1 = s1.executeQuery(sql);
                            bayar = rs.getDouble(3);
                            while (rs1.next()) {
                                if (rs.getDouble(3) > 0.0) { //debet
                                    hutang = rs1.getDouble(3);
                                    sisa = bayar - hutang;
                                    if (sisa >= 0) {
                                        hb.setID(hutangbayarDao.getID(c));
                                        hb.setIDHUTANG(Integer.parseInt(rs1.getString(1).toString()));
                                        hb.setKODEHUTANGBAYAR(hutangbayarDao.getKodeHutangBayar(c));
                                        hb.setTANGGAL(tanggal.getText());
                                        hb.setJUMLAH(hutang);
                                        hutangbayarDao.insertIntoHUTANGBAYAR(c, hb);
                                        ht = hutangDao.getDetails(c, hb.getIDHUTANG());
                                        ht.setSTATUS("0");
                                        hutangDao.updateHUTANG(c, ht.getID(), ht);
                                        bayar = sisa;
                                    } else {
                                        hb.setID(hutangbayarDao.getID(c));
                                        hb.setIDHUTANG(Integer.parseInt(rs1.getString(1).toString()));
                                        hb.setKODEHUTANGBAYAR(hutangbayarDao.getKodeHutangBayar(c));
                                        hb.setTANGGAL(tanggal.getText());
                                        hb.setJUMLAH(bayar);
                                        hutangbayarDao.insertIntoHUTANGBAYAR(c, hb);
                                        break;
                                    }
                                }
                            }
                            rs1.close();
                            s1.close();
                        }
                    }
                    r.setKODEJURNAL("" + IDJurnal);
                    r.setKODEPERKIRAAN(rs.getString(1));
                    r.setDEBET(rs.getDouble(3));
                    r.setKREDIT(rs.getDouble(4));
                    r.setNO(count);
                    r.setREF("");
                    boolean insertIntoRINCIJURNAL = rincijurnalDao.insertIntoRINCIJURNAL(c, r);
                    count++;
                }
                rs.close();
                
                s.close();
                
            }
        } catch (Exception ex) {
            Logger.getLogger(FormJurnal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void setKodeJurnal(int pil) {
        String tgl = com.erv.function.Util.toDateStringSql(new Date());
        try {
            IDJurnal = jurnalDao.getIDJurnal(c);
            if (pil == 1) {
                idjurnal.setText(jurnalDao.getGenKodeJurnal(c, "KM"));
            } else if (pil == 2) {
                idjurnal.setText(jurnalDao.getGenKodeJurnal(c, "KK")); //KK
            } else if (pil == 3) {
                idjurnal.setText(jurnalDao.getGenKodeJurnal(c, "BM")); //BM
            } else if (pil == 4) {
                idjurnal.setText(jurnalDao.getGenKodeJurnal(c, "BK")); //BK
            }
        } catch (SQLException ex) {
            Logger.getLogger(FormPenjualan.class.getName()).log(Level.SEVERE, null, ex);
        }
//        String tgl = com.erv.function.Util.toDateStringSql(new Date());
//        try {
//            IDJurnal = jurnalDao.getIDJurnal(c);
//            if (pil == 1) {
//                idjurnal.setText("AK" + com.erv.function.Util.getbln(tgl) + com.erv.function.Util.getthn(tgl) + IDJurnal);
//            } else if (pil == 2) {
//                idjurnal.setText("AM" + com.erv.function.Util.getbln(tgl) + com.erv.function.Util.getthn(tgl) + IDJurnal);
//            } else if (pil == 3) {
//                idjurnal.setText("CK" + com.erv.function.Util.getbln(tgl) + com.erv.function.Util.getthn(tgl) + IDJurnal);
//            } else if (pil == 4) {
//                idjurnal.setText("CM" + com.erv.function.Util.getbln(tgl) + com.erv.function.Util.getthn(tgl) + IDJurnal);
//            }
//        } catch (SQLException ex) {
//            Logger.getLogger(FormPenjualan.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    public boolean cekperiode(String periode) throws SQLException {
        //String periode = thn + "." + bln;
        boolean hasil1 = false;
        Statement s = c.createStatement();
        ResultSet rs = s.executeQuery("select * from KONTROLPERIODE where PERIODE='" + periode + "' and STATUSBUKU='1'");

        if (rs.next()) {
            if (rs.getString(1) != null) {
                hasil1 = true;
            }
        }
        rs.close();
        s.close();
        return hasil1;

    }

    public boolean cekperiodeAda(String bul) throws SQLException {
        //String periode = thn + "." + bln;
        boolean ada = false;
        Statement s = c.createStatement();
        ResultSet rs = s.executeQuery("select * from KONTROLPERIODE where PERIODE='" + bul + "'");

        if (rs.next()) {
            if (rs.getString(1) != null) {
                ada = true;
            }
        }
        rs.close();
        s.close();
        return ada;
    }

//    void settingtombol(boolean simp, boolean edit, boolean hapus) {
//        cmdInsert.setEnabled(simp);
//        cmdUpdate.setEnabled(edit);
//        cmdDelete.setEnabled(hapus);
//    }
    void prosesUpdateLog() {
        //java.sql.Date tanggallog;
        String tanggallog;
        String jamlog = u.jamsekarang + ":" + u.menitsekarang + ":" + u.detiksekarang;
        //tanggallog = java.sql.Date.valueOf(u.thnsekarang + "-" + u.blnsekarang + "-" + u.tglsekarang);
        tanggallog = u.thnsekarang + "-" + u.blnsekarang + "-" + u.tglsekarang;
        try {
            String ketlog = "";
            lh.setUSERIDENTITY(JavarieSoftApp.jenisuser);
            lh.setTANGGAL(tanggallog);
            lh.setJAM(jamlog);
            lh.setTABEL("TJURNAL");
            lh.setNOREFF(idjurnal.getText());
            lh.setAKSI(aksilog);
            if (aksilog.equals("InsertJurnal")) {
                ketlog = "Insert Data Jurnal " + idjurnal.getText() + " Tanggal " + java.sql.Date.valueOf(tanggal.getText()) + " Deskripsi " + deskripsi.getText();
            } else if (aksilog.equals("Update")) {
                ketlog = "Update Data Jurnal " + idjurnal.getText();
            } else if (aksilog.equals("Delete")) {
                ketlog = "Delete Data Jurnal " + idjurnal.getText();
            }
            lh.setKETERANGAN(ketlog);
            lhdao.insert(c, lh);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.toString());
        }

    }

    public static double toDesimal(double a) {
        DecimalFormat df = new DecimalFormat("###.00");
        return Double.parseDouble(df.format(a));
    }
    
    private void settingtombol(boolean simpJurnal,boolean hapusJurnal) {
        btnSimpanJurnal.setEnabled(simpJurnal);
        btnDeleteJurnal.setEnabled(hapusJurnal);
    }
    
    void cektombol(){
        if (JavarieSoftApp.groupuser.equals("Administrator")) {
           settingtombol(true, true);
        } else if (JavarieSoftApp.groupuser.equals("Accounting")) {
           settingtombol(true, false);
        }
    }
}
